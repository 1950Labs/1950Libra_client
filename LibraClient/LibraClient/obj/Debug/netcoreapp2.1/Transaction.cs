// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/transaction.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Types {

  /// <summary>Holder for reflection information generated from Protos/transaction.proto</summary>
  public static partial class TransactionReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/transaction.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TransactionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQcm90b3MvdHJhbnNhY3Rpb24ucHJvdG8SBXR5cGVzGhhQcm90b3MvYWNj",
            "ZXNzX3BhdGgucHJvdG8aE1Byb3Rvcy9ldmVudHMucHJvdG8aElByb3Rvcy9w",
            "cm9vZi5wcm90bxodUHJvdG9zL3RyYW5zYWN0aW9uX2luZm8ucHJvdG8aHmdv",
            "b2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90byLeAQoOUmF3VHJhbnNhY3Rp",
            "b24SFgoOc2VuZGVyX2FjY291bnQYASABKAwSFwoPc2VxdWVuY2VfbnVtYmVy",
            "GAIgASgEEiEKB3Byb2dyYW0YAyABKAsyDi50eXBlcy5Qcm9ncmFtSAASJAoJ",
            "d3JpdGVfc2V0GAQgASgLMg8udHlwZXMuV3JpdGVTZXRIABIWCg5tYXhfZ2Fz",
            "X2Ftb3VudBgFIAEoBBIWCg5nYXNfdW5pdF9wcmljZRgGIAEoBBIXCg9leHBp",
            "cmF0aW9uX3RpbWUYByABKARCCQoHcGF5bG9hZCJXCgdQcm9ncmFtEgwKBGNv",
            "ZGUYASABKAwSLQoJYXJndW1lbnRzGAIgAygLMhoudHlwZXMuVHJhbnNhY3Rp",
            "b25Bcmd1bWVudBIPCgdtb2R1bGVzGAMgAygMIpEBChNUcmFuc2FjdGlvbkFy",
            "Z3VtZW50EjAKBHR5cGUYASABKA4yIi50eXBlcy5UcmFuc2FjdGlvbkFyZ3Vt",
            "ZW50LkFyZ1R5cGUSDAoEZGF0YRgCIAEoDCI6CgdBcmdUeXBlEgcKA1U2NBAA",
            "EgsKB0FERFJFU1MQARIKCgZTVFJJTkcQAhINCglCWVRFQVJSQVkQAyJfChFT",
            "aWduZWRUcmFuc2FjdGlvbhIVCg1yYXdfdHhuX2J5dGVzGAEgASgMEhkKEXNl",
            "bmRlcl9wdWJsaWNfa2V5GAIgASgMEhgKEHNlbmRlcl9zaWduYXR1cmUYAyAB",
            "KAwitAEKGlNpZ25lZFRyYW5zYWN0aW9uV2l0aFByb29mEg8KB3ZlcnNpb24Y",
            "ASABKAQSNAoSc2lnbmVkX3RyYW5zYWN0aW9uGAIgASgLMhgudHlwZXMuU2ln",
            "bmVkVHJhbnNhY3Rpb24SLAoFcHJvb2YYAyABKAsyHS50eXBlcy5TaWduZWRU",
            "cmFuc2FjdGlvblByb29mEiEKBmV2ZW50cxgEIAEoCzIRLnR5cGVzLkV2ZW50",
            "c0xpc3QihAEKF1NpZ25lZFRyYW5zYWN0aW9uc0Jsb2NrEi4KDHRyYW5zYWN0",
            "aW9ucxgBIAMoCzIYLnR5cGVzLlNpZ25lZFRyYW5zYWN0aW9uEhwKFHZhbGlk",
            "YXRvcl9wdWJsaWNfa2V5GAIgASgMEhsKE3ZhbGlkYXRvcl9zaWduYXR1cmUY",
            "AyABKAwiLQoIV3JpdGVTZXQSIQoJd3JpdGVfc2V0GAEgAygLMg4udHlwZXMu",
            "V3JpdGVPcCJiCgdXcml0ZU9wEiYKC2FjY2Vzc19wYXRoGAEgASgLMhEudHlw",
            "ZXMuQWNjZXNzUGF0aBINCgV2YWx1ZRgCIAEoDBIgCgR0eXBlGAMgASgOMhIu",
            "dHlwZXMuV3JpdGVPcFR5cGUiLQoMQWNjb3VudFN0YXRlEg8KB2FkZHJlc3MY",
            "ASABKAwSDAoEYmxvYhgCIAEoDCKgAQoTVHJhbnNhY3Rpb25Ub0NvbW1pdBIs",
            "CgpzaWduZWRfdHhuGAEgASgLMhgudHlwZXMuU2lnbmVkVHJhbnNhY3Rpb24S",
            "KwoOYWNjb3VudF9zdGF0ZXMYAiADKAsyEy50eXBlcy5BY2NvdW50U3RhdGUS",
            "HAoGZXZlbnRzGAMgAygLMgwudHlwZXMuRXZlbnQSEAoIZ2FzX3VzZWQYBCAB",
            "KAQi4gIKGFRyYW5zYWN0aW9uTGlzdFdpdGhQcm9vZhIuCgx0cmFuc2FjdGlv",
            "bnMYASADKAsyGC50eXBlcy5TaWduZWRUcmFuc2FjdGlvbhIlCgVpbmZvcxgC",
            "IAMoCzIWLnR5cGVzLlRyYW5zYWN0aW9uSW5mbxI1ChNldmVudHNfZm9yX3Zl",
            "cnNpb25zGAMgASgLMhgudHlwZXMuRXZlbnRzRm9yVmVyc2lvbnMSPwoZZmly",
            "c3RfdHJhbnNhY3Rpb25fdmVyc2lvbhgEIAEoCzIcLmdvb2dsZS5wcm90b2J1",
            "Zi5VSW50NjRWYWx1ZRI7Chpwcm9vZl9vZl9maXJzdF90cmFuc2FjdGlvbhgF",
            "IAEoCzIXLnR5cGVzLkFjY3VtdWxhdG9yUHJvb2YSOgoZcHJvb2Zfb2ZfbGFz",
            "dF90cmFuc2FjdGlvbhgGIAEoCzIXLnR5cGVzLkFjY3VtdWxhdG9yUHJvb2Yq",
            "JAoLV3JpdGVPcFR5cGUSCQoFV3JpdGUQABIKCgZEZWxldGUQAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Types.AccessPathReflection.Descriptor, global::Types.EventsReflection.Descriptor, global::Types.ProofReflection.Descriptor, global::Types.TransactionInfoReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Types.WriteOpType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.RawTransaction), global::Types.RawTransaction.Parser, new[]{ "SenderAccount", "SequenceNumber", "Program", "WriteSet", "MaxGasAmount", "GasUnitPrice", "ExpirationTime" }, new[]{ "Payload" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.Program), global::Types.Program.Parser, new[]{ "Code", "Arguments", "Modules" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.TransactionArgument), global::Types.TransactionArgument.Parser, new[]{ "Type", "Data" }, null, new[]{ typeof(global::Types.TransactionArgument.Types.ArgType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.SignedTransaction), global::Types.SignedTransaction.Parser, new[]{ "RawTxnBytes", "SenderPublicKey", "SenderSignature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.SignedTransactionWithProof), global::Types.SignedTransactionWithProof.Parser, new[]{ "Version", "SignedTransaction", "Proof", "Events" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.SignedTransactionsBlock), global::Types.SignedTransactionsBlock.Parser, new[]{ "Transactions", "ValidatorPublicKey", "ValidatorSignature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.WriteSet), global::Types.WriteSet.Parser, new[]{ "WriteSet_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.WriteOp), global::Types.WriteOp.Parser, new[]{ "AccessPath", "Value", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.AccountState), global::Types.AccountState.Parser, new[]{ "Address", "Blob" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.TransactionToCommit), global::Types.TransactionToCommit.Parser, new[]{ "SignedTxn", "AccountStates", "Events", "GasUsed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.TransactionListWithProof), global::Types.TransactionListWithProof.Parser, new[]{ "Transactions", "Infos", "EventsForVersions", "FirstTransactionVersion", "ProofOfFirstTransaction", "ProofOfLastTransaction" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Type of write operation
  /// </summary>
  public enum WriteOpType {
    /// <summary>
    /// The WriteOp is to create/update the field from storage.
    /// </summary>
    [pbr::OriginalName("Write")] Write = 0,
    /// <summary>
    /// The WriteOp is to delete the field from storage.
    /// </summary>
    [pbr::OriginalName("Delete")] Delete = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// A generic structure that describes a transaction that a client submits
  /// </summary>
  public sealed partial class RawTransaction : pb::IMessage<RawTransaction> {
    private static readonly pb::MessageParser<RawTransaction> _parser = new pb::MessageParser<RawTransaction>(() => new RawTransaction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RawTransaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.TransactionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawTransaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawTransaction(RawTransaction other) : this() {
      senderAccount_ = other.senderAccount_;
      sequenceNumber_ = other.sequenceNumber_;
      maxGasAmount_ = other.maxGasAmount_;
      gasUnitPrice_ = other.gasUnitPrice_;
      expirationTime_ = other.expirationTime_;
      switch (other.PayloadCase) {
        case PayloadOneofCase.Program:
          Program = other.Program.Clone();
          break;
        case PayloadOneofCase.WriteSet:
          WriteSet = other.WriteSet.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawTransaction Clone() {
      return new RawTransaction(this);
    }

    /// <summary>Field number for the "sender_account" field.</summary>
    public const int SenderAccountFieldNumber = 1;
    private pb::ByteString senderAccount_ = pb::ByteString.Empty;
    /// <summary>
    /// Sender's account address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SenderAccount {
      get { return senderAccount_; }
      set {
        senderAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sequence_number" field.</summary>
    public const int SequenceNumberFieldNumber = 2;
    private ulong sequenceNumber_;
    /// <summary>
    /// Sequence number of this transaction corresponding to sender's account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SequenceNumber {
      get { return sequenceNumber_; }
      set {
        sequenceNumber_ = value;
      }
    }

    /// <summary>Field number for the "program" field.</summary>
    public const int ProgramFieldNumber = 3;
    /// <summary>
    /// The transaction script to execute.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.Program Program {
      get { return payloadCase_ == PayloadOneofCase.Program ? (global::Types.Program) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Program;
      }
    }

    /// <summary>Field number for the "write_set" field.</summary>
    public const int WriteSetFieldNumber = 4;
    /// <summary>
    /// A write set, used for genesis blocks and other magic transactions.
    /// This bypasses the rules for regular transactions so will typically be
    /// rejected. Only under special circumstances will it be accepted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.WriteSet WriteSet {
      get { return payloadCase_ == PayloadOneofCase.WriteSet ? (global::Types.WriteSet) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.WriteSet;
      }
    }

    /// <summary>Field number for the "max_gas_amount" field.</summary>
    public const int MaxGasAmountFieldNumber = 5;
    private ulong maxGasAmount_;
    /// <summary>
    /// Maximal total gas specified by wallet to spend for this transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxGasAmount {
      get { return maxGasAmount_; }
      set {
        maxGasAmount_ = value;
      }
    }

    /// <summary>Field number for the "gas_unit_price" field.</summary>
    public const int GasUnitPriceFieldNumber = 6;
    private ulong gasUnitPrice_;
    /// <summary>
    /// The price to be paid for each unit of gas.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GasUnitPrice {
      get { return gasUnitPrice_; }
      set {
        gasUnitPrice_ = value;
      }
    }

    /// <summary>Field number for the "expiration_time" field.</summary>
    public const int ExpirationTimeFieldNumber = 7;
    private ulong expirationTime_;
    /// <summary>
    /// Expiration time for this transaction.  If storage is queried and
    /// the time returned is greater than or equal to this time and this
    /// transaction has not been included, you can be certain that it will
    /// never be included.
    /// If set to 0, there will be no expiration time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExpirationTime {
      get { return expirationTime_; }
      set {
        expirationTime_ = value;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      Program = 3,
      WriteSet = 4,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RawTransaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RawTransaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SenderAccount != other.SenderAccount) return false;
      if (SequenceNumber != other.SequenceNumber) return false;
      if (!object.Equals(Program, other.Program)) return false;
      if (!object.Equals(WriteSet, other.WriteSet)) return false;
      if (MaxGasAmount != other.MaxGasAmount) return false;
      if (GasUnitPrice != other.GasUnitPrice) return false;
      if (ExpirationTime != other.ExpirationTime) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SenderAccount.Length != 0) hash ^= SenderAccount.GetHashCode();
      if (SequenceNumber != 0UL) hash ^= SequenceNumber.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Program) hash ^= Program.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.WriteSet) hash ^= WriteSet.GetHashCode();
      if (MaxGasAmount != 0UL) hash ^= MaxGasAmount.GetHashCode();
      if (GasUnitPrice != 0UL) hash ^= GasUnitPrice.GetHashCode();
      if (ExpirationTime != 0UL) hash ^= ExpirationTime.GetHashCode();
      hash ^= (int) payloadCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SenderAccount.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SenderAccount);
      }
      if (SequenceNumber != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SequenceNumber);
      }
      if (payloadCase_ == PayloadOneofCase.Program) {
        output.WriteRawTag(26);
        output.WriteMessage(Program);
      }
      if (payloadCase_ == PayloadOneofCase.WriteSet) {
        output.WriteRawTag(34);
        output.WriteMessage(WriteSet);
      }
      if (MaxGasAmount != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(MaxGasAmount);
      }
      if (GasUnitPrice != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(GasUnitPrice);
      }
      if (ExpirationTime != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(ExpirationTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SenderAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SenderAccount);
      }
      if (SequenceNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SequenceNumber);
      }
      if (payloadCase_ == PayloadOneofCase.Program) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Program);
      }
      if (payloadCase_ == PayloadOneofCase.WriteSet) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WriteSet);
      }
      if (MaxGasAmount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxGasAmount);
      }
      if (GasUnitPrice != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GasUnitPrice);
      }
      if (ExpirationTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpirationTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RawTransaction other) {
      if (other == null) {
        return;
      }
      if (other.SenderAccount.Length != 0) {
        SenderAccount = other.SenderAccount;
      }
      if (other.SequenceNumber != 0UL) {
        SequenceNumber = other.SequenceNumber;
      }
      if (other.MaxGasAmount != 0UL) {
        MaxGasAmount = other.MaxGasAmount;
      }
      if (other.GasUnitPrice != 0UL) {
        GasUnitPrice = other.GasUnitPrice;
      }
      if (other.ExpirationTime != 0UL) {
        ExpirationTime = other.ExpirationTime;
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.Program:
          if (Program == null) {
            Program = new global::Types.Program();
          }
          Program.MergeFrom(other.Program);
          break;
        case PayloadOneofCase.WriteSet:
          if (WriteSet == null) {
            WriteSet = new global::Types.WriteSet();
          }
          WriteSet.MergeFrom(other.WriteSet);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SenderAccount = input.ReadBytes();
            break;
          }
          case 16: {
            SequenceNumber = input.ReadUInt64();
            break;
          }
          case 26: {
            global::Types.Program subBuilder = new global::Types.Program();
            if (payloadCase_ == PayloadOneofCase.Program) {
              subBuilder.MergeFrom(Program);
            }
            input.ReadMessage(subBuilder);
            Program = subBuilder;
            break;
          }
          case 34: {
            global::Types.WriteSet subBuilder = new global::Types.WriteSet();
            if (payloadCase_ == PayloadOneofCase.WriteSet) {
              subBuilder.MergeFrom(WriteSet);
            }
            input.ReadMessage(subBuilder);
            WriteSet = subBuilder;
            break;
          }
          case 40: {
            MaxGasAmount = input.ReadUInt64();
            break;
          }
          case 48: {
            GasUnitPrice = input.ReadUInt64();
            break;
          }
          case 56: {
            ExpirationTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The code for the transaction to execute
  /// </summary>
  public sealed partial class Program : pb::IMessage<Program> {
    private static readonly pb::MessageParser<Program> _parser = new pb::MessageParser<Program>(() => new Program());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Program> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.TransactionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Program() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Program(Program other) : this() {
      code_ = other.code_;
      arguments_ = other.arguments_.Clone();
      modules_ = other.modules_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Program Clone() {
      return new Program(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private pb::ByteString code_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "arguments" field.</summary>
    public const int ArgumentsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Types.TransactionArgument> _repeated_arguments_codec
        = pb::FieldCodec.ForMessage(18, global::Types.TransactionArgument.Parser);
    private readonly pbc::RepeatedField<global::Types.TransactionArgument> arguments_ = new pbc::RepeatedField<global::Types.TransactionArgument>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Types.TransactionArgument> Arguments {
      get { return arguments_; }
    }

    /// <summary>Field number for the "modules" field.</summary>
    public const int ModulesFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_modules_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> modules_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Modules {
      get { return modules_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Program);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Program other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if(!arguments_.Equals(other.arguments_)) return false;
      if(!modules_.Equals(other.modules_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      hash ^= arguments_.GetHashCode();
      hash ^= modules_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Code);
      }
      arguments_.WriteTo(output, _repeated_arguments_codec);
      modules_.WriteTo(output, _repeated_modules_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Code);
      }
      size += arguments_.CalculateSize(_repeated_arguments_codec);
      size += modules_.CalculateSize(_repeated_modules_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Program other) {
      if (other == null) {
        return;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      arguments_.Add(other.arguments_);
      modules_.Add(other.modules_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Code = input.ReadBytes();
            break;
          }
          case 18: {
            arguments_.AddEntriesFrom(input, _repeated_arguments_codec);
            break;
          }
          case 26: {
            modules_.AddEntriesFrom(input, _repeated_modules_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An argument to the transaction if the transaction takes arguments
  /// </summary>
  public sealed partial class TransactionArgument : pb::IMessage<TransactionArgument> {
    private static readonly pb::MessageParser<TransactionArgument> _parser = new pb::MessageParser<TransactionArgument>(() => new TransactionArgument());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionArgument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.TransactionReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionArgument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionArgument(TransactionArgument other) : this() {
      type_ = other.type_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionArgument Clone() {
      return new TransactionArgument(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Types.TransactionArgument.Types.ArgType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.TransactionArgument.Types.ArgType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionArgument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionArgument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionArgument other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Types.TransactionArgument.Types.ArgType) input.ReadEnum();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TransactionArgument message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ArgType {
        [pbr::OriginalName("U64")] U64 = 0,
        [pbr::OriginalName("ADDRESS")] Address = 1,
        [pbr::OriginalName("STRING")] String = 2,
        [pbr::OriginalName("BYTEARRAY")] Bytearray = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// A generic structure that represents signed RawTransaction
  /// </summary>
  public sealed partial class SignedTransaction : pb::IMessage<SignedTransaction> {
    private static readonly pb::MessageParser<SignedTransaction> _parser = new pb::MessageParser<SignedTransaction>(() => new SignedTransaction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignedTransaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.TransactionReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedTransaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedTransaction(SignedTransaction other) : this() {
      rawTxnBytes_ = other.rawTxnBytes_;
      senderPublicKey_ = other.senderPublicKey_;
      senderSignature_ = other.senderSignature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedTransaction Clone() {
      return new SignedTransaction(this);
    }

    /// <summary>Field number for the "raw_txn_bytes" field.</summary>
    public const int RawTxnBytesFieldNumber = 1;
    private pb::ByteString rawTxnBytes_ = pb::ByteString.Empty;
    /// <summary>
    /// The serialized Protobuf bytes for RawTransaction, for which the signature
    /// was signed. Protobuf doesn't guarantee the serialized bytes is canonical
    /// across different language implementations, but for our use cases for
    /// transaction it is not necessary because the client is the only one to
    /// produce this bytes, which is then persisted in storage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RawTxnBytes {
      get { return rawTxnBytes_; }
      set {
        rawTxnBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sender_public_key" field.</summary>
    public const int SenderPublicKeyFieldNumber = 2;
    private pb::ByteString senderPublicKey_ = pb::ByteString.Empty;
    /// <summary>
    /// public key that corresponds to RawTransaction::sender_account
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SenderPublicKey {
      get { return senderPublicKey_; }
      set {
        senderPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sender_signature" field.</summary>
    public const int SenderSignatureFieldNumber = 3;
    private pb::ByteString senderSignature_ = pb::ByteString.Empty;
    /// <summary>
    /// signature for the hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SenderSignature {
      get { return senderSignature_; }
      set {
        senderSignature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignedTransaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignedTransaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RawTxnBytes != other.RawTxnBytes) return false;
      if (SenderPublicKey != other.SenderPublicKey) return false;
      if (SenderSignature != other.SenderSignature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RawTxnBytes.Length != 0) hash ^= RawTxnBytes.GetHashCode();
      if (SenderPublicKey.Length != 0) hash ^= SenderPublicKey.GetHashCode();
      if (SenderSignature.Length != 0) hash ^= SenderSignature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RawTxnBytes.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RawTxnBytes);
      }
      if (SenderPublicKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SenderPublicKey);
      }
      if (SenderSignature.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(SenderSignature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RawTxnBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RawTxnBytes);
      }
      if (SenderPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SenderPublicKey);
      }
      if (SenderSignature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SenderSignature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignedTransaction other) {
      if (other == null) {
        return;
      }
      if (other.RawTxnBytes.Length != 0) {
        RawTxnBytes = other.RawTxnBytes;
      }
      if (other.SenderPublicKey.Length != 0) {
        SenderPublicKey = other.SenderPublicKey;
      }
      if (other.SenderSignature.Length != 0) {
        SenderSignature = other.SenderSignature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RawTxnBytes = input.ReadBytes();
            break;
          }
          case 18: {
            SenderPublicKey = input.ReadBytes();
            break;
          }
          case 26: {
            SenderSignature = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SignedTransactionWithProof : pb::IMessage<SignedTransactionWithProof> {
    private static readonly pb::MessageParser<SignedTransactionWithProof> _parser = new pb::MessageParser<SignedTransactionWithProof>(() => new SignedTransactionWithProof());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignedTransactionWithProof> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.TransactionReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedTransactionWithProof() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedTransactionWithProof(SignedTransactionWithProof other) : this() {
      version_ = other.version_;
      signedTransaction_ = other.signedTransaction_ != null ? other.signedTransaction_.Clone() : null;
      proof_ = other.proof_ != null ? other.proof_.Clone() : null;
      events_ = other.events_ != null ? other.events_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedTransactionWithProof Clone() {
      return new SignedTransactionWithProof(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private ulong version_;
    /// <summary>
    /// The version of the returned signed transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "signed_transaction" field.</summary>
    public const int SignedTransactionFieldNumber = 2;
    private global::Types.SignedTransaction signedTransaction_;
    /// <summary>
    /// The transaction itself.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.SignedTransaction SignedTransaction {
      get { return signedTransaction_; }
      set {
        signedTransaction_ = value;
      }
    }

    /// <summary>Field number for the "proof" field.</summary>
    public const int ProofFieldNumber = 3;
    private global::Types.SignedTransactionProof proof_;
    /// <summary>
    /// The proof authenticating the signed transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.SignedTransactionProof Proof {
      get { return proof_; }
      set {
        proof_ = value;
      }
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 4;
    private global::Types.EventsList events_;
    /// <summary>
    /// The events yielded by executing the transaction, if requested.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.EventsList Events {
      get { return events_; }
      set {
        events_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignedTransactionWithProof);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignedTransactionWithProof other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(SignedTransaction, other.SignedTransaction)) return false;
      if (!object.Equals(Proof, other.Proof)) return false;
      if (!object.Equals(Events, other.Events)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0UL) hash ^= Version.GetHashCode();
      if (signedTransaction_ != null) hash ^= SignedTransaction.GetHashCode();
      if (proof_ != null) hash ^= Proof.GetHashCode();
      if (events_ != null) hash ^= Events.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Version);
      }
      if (signedTransaction_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SignedTransaction);
      }
      if (proof_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Proof);
      }
      if (events_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Events);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Version);
      }
      if (signedTransaction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignedTransaction);
      }
      if (proof_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Proof);
      }
      if (events_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Events);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignedTransactionWithProof other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0UL) {
        Version = other.Version;
      }
      if (other.signedTransaction_ != null) {
        if (signedTransaction_ == null) {
          SignedTransaction = new global::Types.SignedTransaction();
        }
        SignedTransaction.MergeFrom(other.SignedTransaction);
      }
      if (other.proof_ != null) {
        if (proof_ == null) {
          Proof = new global::Types.SignedTransactionProof();
        }
        Proof.MergeFrom(other.Proof);
      }
      if (other.events_ != null) {
        if (events_ == null) {
          Events = new global::Types.EventsList();
        }
        Events.MergeFrom(other.Events);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadUInt64();
            break;
          }
          case 18: {
            if (signedTransaction_ == null) {
              SignedTransaction = new global::Types.SignedTransaction();
            }
            input.ReadMessage(SignedTransaction);
            break;
          }
          case 26: {
            if (proof_ == null) {
              Proof = new global::Types.SignedTransactionProof();
            }
            input.ReadMessage(Proof);
            break;
          }
          case 34: {
            if (events_ == null) {
              Events = new global::Types.EventsList();
            }
            input.ReadMessage(Events);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A generic structure that represents a block of transactions originated from a
  /// particular validator instance.
  /// </summary>
  public sealed partial class SignedTransactionsBlock : pb::IMessage<SignedTransactionsBlock> {
    private static readonly pb::MessageParser<SignedTransactionsBlock> _parser = new pb::MessageParser<SignedTransactionsBlock>(() => new SignedTransactionsBlock());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignedTransactionsBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.TransactionReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedTransactionsBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedTransactionsBlock(SignedTransactionsBlock other) : this() {
      transactions_ = other.transactions_.Clone();
      validatorPublicKey_ = other.validatorPublicKey_;
      validatorSignature_ = other.validatorSignature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedTransactionsBlock Clone() {
      return new SignedTransactionsBlock(this);
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Types.SignedTransaction> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(10, global::Types.SignedTransaction.Parser);
    private readonly pbc::RepeatedField<global::Types.SignedTransaction> transactions_ = new pbc::RepeatedField<global::Types.SignedTransaction>();
    /// <summary>
    /// Set of Signed Transactions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Types.SignedTransaction> Transactions {
      get { return transactions_; }
    }

    /// <summary>Field number for the "validator_public_key" field.</summary>
    public const int ValidatorPublicKeyFieldNumber = 2;
    private pb::ByteString validatorPublicKey_ = pb::ByteString.Empty;
    /// <summary>
    /// Public key of the validator that created this block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ValidatorPublicKey {
      get { return validatorPublicKey_; }
      set {
        validatorPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "validator_signature" field.</summary>
    public const int ValidatorSignatureFieldNumber = 3;
    private pb::ByteString validatorSignature_ = pb::ByteString.Empty;
    /// <summary>
    /// Signature of the validator that created this block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ValidatorSignature {
      get { return validatorSignature_; }
      set {
        validatorSignature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignedTransactionsBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignedTransactionsBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!transactions_.Equals(other.transactions_)) return false;
      if (ValidatorPublicKey != other.ValidatorPublicKey) return false;
      if (ValidatorSignature != other.ValidatorSignature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= transactions_.GetHashCode();
      if (ValidatorPublicKey.Length != 0) hash ^= ValidatorPublicKey.GetHashCode();
      if (ValidatorSignature.Length != 0) hash ^= ValidatorSignature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      transactions_.WriteTo(output, _repeated_transactions_codec);
      if (ValidatorPublicKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ValidatorPublicKey);
      }
      if (ValidatorSignature.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ValidatorSignature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      if (ValidatorPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ValidatorPublicKey);
      }
      if (ValidatorSignature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ValidatorSignature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignedTransactionsBlock other) {
      if (other == null) {
        return;
      }
      transactions_.Add(other.transactions_);
      if (other.ValidatorPublicKey.Length != 0) {
        ValidatorPublicKey = other.ValidatorPublicKey;
      }
      if (other.ValidatorSignature.Length != 0) {
        ValidatorSignature = other.ValidatorSignature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
          case 18: {
            ValidatorPublicKey = input.ReadBytes();
            break;
          }
          case 26: {
            ValidatorSignature = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Set of WriteOps to save to storage.
  /// </summary>
  public sealed partial class WriteSet : pb::IMessage<WriteSet> {
    private static readonly pb::MessageParser<WriteSet> _parser = new pb::MessageParser<WriteSet>(() => new WriteSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WriteSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.TransactionReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteSet(WriteSet other) : this() {
      writeSet_ = other.writeSet_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteSet Clone() {
      return new WriteSet(this);
    }

    /// <summary>Field number for the "write_set" field.</summary>
    public const int WriteSet_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Types.WriteOp> _repeated_writeSet_codec
        = pb::FieldCodec.ForMessage(10, global::Types.WriteOp.Parser);
    private readonly pbc::RepeatedField<global::Types.WriteOp> writeSet_ = new pbc::RepeatedField<global::Types.WriteOp>();
    /// <summary>
    /// Set of WriteOp for storage update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Types.WriteOp> WriteSet_ {
      get { return writeSet_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WriteSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WriteSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!writeSet_.Equals(other.writeSet_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= writeSet_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      writeSet_.WriteTo(output, _repeated_writeSet_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += writeSet_.CalculateSize(_repeated_writeSet_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WriteSet other) {
      if (other == null) {
        return;
      }
      writeSet_.Add(other.writeSet_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            writeSet_.AddEntriesFrom(input, _repeated_writeSet_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Write Operation on underlying storage.
  /// </summary>
  public sealed partial class WriteOp : pb::IMessage<WriteOp> {
    private static readonly pb::MessageParser<WriteOp> _parser = new pb::MessageParser<WriteOp>(() => new WriteOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WriteOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.TransactionReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteOp(WriteOp other) : this() {
      accessPath_ = other.accessPath_ != null ? other.accessPath_.Clone() : null;
      value_ = other.value_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteOp Clone() {
      return new WriteOp(this);
    }

    /// <summary>Field number for the "access_path" field.</summary>
    public const int AccessPathFieldNumber = 1;
    private global::Types.AccessPath accessPath_;
    /// <summary>
    /// AccessPath of the write set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.AccessPath AccessPath {
      get { return accessPath_; }
      set {
        accessPath_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private pb::ByteString value_ = pb::ByteString.Empty;
    /// <summary>
    /// The value of the write op. Empty if `type` is Delete.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Types.WriteOpType type_ = 0;
    /// <summary>
    /// WriteOp type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.WriteOpType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WriteOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WriteOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AccessPath, other.AccessPath)) return false;
      if (Value != other.Value) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (accessPath_ != null) hash ^= AccessPath.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (accessPath_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AccessPath);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Value);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (accessPath_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccessPath);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WriteOp other) {
      if (other == null) {
        return;
      }
      if (other.accessPath_ != null) {
        if (accessPath_ == null) {
          AccessPath = new global::Types.AccessPath();
        }
        AccessPath.MergeFrom(other.AccessPath);
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (accessPath_ == null) {
              AccessPath = new global::Types.AccessPath();
            }
            input.ReadMessage(AccessPath);
            break;
          }
          case 18: {
            Value = input.ReadBytes();
            break;
          }
          case 24: {
            Type = (global::Types.WriteOpType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Account state as a whole.
  /// After execution, updates to accounts are passed in this form to storage for
  /// persistence.
  /// </summary>
  public sealed partial class AccountState : pb::IMessage<AccountState> {
    private static readonly pb::MessageParser<AccountState> _parser = new pb::MessageParser<AccountState>(() => new AccountState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.TransactionReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountState(AccountState other) : this() {
      address_ = other.address_;
      blob_ = other.blob_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountState Clone() {
      return new AccountState(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private pb::ByteString address_ = pb::ByteString.Empty;
    /// <summary>
    /// Account address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "blob" field.</summary>
    public const int BlobFieldNumber = 2;
    private pb::ByteString blob_ = pb::ByteString.Empty;
    /// <summary>
    /// Account state blob
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Blob {
      get { return blob_; }
      set {
        blob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (Blob != other.Blob) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Blob.Length != 0) hash ^= Blob.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Address);
      }
      if (Blob.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Blob);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      if (Blob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Blob);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountState other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Blob.Length != 0) {
        Blob = other.Blob;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadBytes();
            break;
          }
          case 18: {
            Blob = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Transaction struct to commit to storage
  /// </summary>
  public sealed partial class TransactionToCommit : pb::IMessage<TransactionToCommit> {
    private static readonly pb::MessageParser<TransactionToCommit> _parser = new pb::MessageParser<TransactionToCommit>(() => new TransactionToCommit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionToCommit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.TransactionReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionToCommit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionToCommit(TransactionToCommit other) : this() {
      signedTxn_ = other.signedTxn_ != null ? other.signedTxn_.Clone() : null;
      accountStates_ = other.accountStates_.Clone();
      events_ = other.events_.Clone();
      gasUsed_ = other.gasUsed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionToCommit Clone() {
      return new TransactionToCommit(this);
    }

    /// <summary>Field number for the "signed_txn" field.</summary>
    public const int SignedTxnFieldNumber = 1;
    private global::Types.SignedTransaction signedTxn_;
    /// <summary>
    /// The signed transaction which was executed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.SignedTransaction SignedTxn {
      get { return signedTxn_; }
      set {
        signedTxn_ = value;
      }
    }

    /// <summary>Field number for the "account_states" field.</summary>
    public const int AccountStatesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Types.AccountState> _repeated_accountStates_codec
        = pb::FieldCodec.ForMessage(18, global::Types.AccountState.Parser);
    private readonly pbc::RepeatedField<global::Types.AccountState> accountStates_ = new pbc::RepeatedField<global::Types.AccountState>();
    /// <summary>
    /// State db updates
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Types.AccountState> AccountStates {
      get { return accountStates_; }
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Types.Event> _repeated_events_codec
        = pb::FieldCodec.ForMessage(26, global::Types.Event.Parser);
    private readonly pbc::RepeatedField<global::Types.Event> events_ = new pbc::RepeatedField<global::Types.Event>();
    /// <summary>
    /// Events yielded by the transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Types.Event> Events {
      get { return events_; }
    }

    /// <summary>Field number for the "gas_used" field.</summary>
    public const int GasUsedFieldNumber = 4;
    private ulong gasUsed_;
    /// <summary>
    /// The amount of gas used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GasUsed {
      get { return gasUsed_; }
      set {
        gasUsed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionToCommit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionToCommit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SignedTxn, other.SignedTxn)) return false;
      if(!accountStates_.Equals(other.accountStates_)) return false;
      if(!events_.Equals(other.events_)) return false;
      if (GasUsed != other.GasUsed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (signedTxn_ != null) hash ^= SignedTxn.GetHashCode();
      hash ^= accountStates_.GetHashCode();
      hash ^= events_.GetHashCode();
      if (GasUsed != 0UL) hash ^= GasUsed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (signedTxn_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SignedTxn);
      }
      accountStates_.WriteTo(output, _repeated_accountStates_codec);
      events_.WriteTo(output, _repeated_events_codec);
      if (GasUsed != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(GasUsed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (signedTxn_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignedTxn);
      }
      size += accountStates_.CalculateSize(_repeated_accountStates_codec);
      size += events_.CalculateSize(_repeated_events_codec);
      if (GasUsed != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GasUsed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionToCommit other) {
      if (other == null) {
        return;
      }
      if (other.signedTxn_ != null) {
        if (signedTxn_ == null) {
          SignedTxn = new global::Types.SignedTransaction();
        }
        SignedTxn.MergeFrom(other.SignedTxn);
      }
      accountStates_.Add(other.accountStates_);
      events_.Add(other.events_);
      if (other.GasUsed != 0UL) {
        GasUsed = other.GasUsed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (signedTxn_ == null) {
              SignedTxn = new global::Types.SignedTransaction();
            }
            input.ReadMessage(SignedTxn);
            break;
          }
          case 18: {
            accountStates_.AddEntriesFrom(input, _repeated_accountStates_codec);
            break;
          }
          case 26: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
          case 32: {
            GasUsed = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A list of consecutive transactions with proof. This is mainly used for state
  /// synchronization when a validator would request a list of transactions from a
  /// peer, verify the proof, execute the transactions and persist them. Note that
  /// the transactions are supposed to belong to the same epoch E, otherwise
  /// verification will fail.
  /// </summary>
  public sealed partial class TransactionListWithProof : pb::IMessage<TransactionListWithProof> {
    private static readonly pb::MessageParser<TransactionListWithProof> _parser = new pb::MessageParser<TransactionListWithProof>(() => new TransactionListWithProof());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionListWithProof> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.TransactionReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionListWithProof() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionListWithProof(TransactionListWithProof other) : this() {
      transactions_ = other.transactions_.Clone();
      infos_ = other.infos_.Clone();
      eventsForVersions_ = other.eventsForVersions_ != null ? other.eventsForVersions_.Clone() : null;
      FirstTransactionVersion = other.FirstTransactionVersion;
      proofOfFirstTransaction_ = other.proofOfFirstTransaction_ != null ? other.proofOfFirstTransaction_.Clone() : null;
      proofOfLastTransaction_ = other.proofOfLastTransaction_ != null ? other.proofOfLastTransaction_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionListWithProof Clone() {
      return new TransactionListWithProof(this);
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Types.SignedTransaction> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(10, global::Types.SignedTransaction.Parser);
    private readonly pbc::RepeatedField<global::Types.SignedTransaction> transactions_ = new pbc::RepeatedField<global::Types.SignedTransaction>();
    /// <summary>
    /// The list of transactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Types.SignedTransaction> Transactions {
      get { return transactions_; }
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Types.TransactionInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(18, global::Types.TransactionInfo.Parser);
    private readonly pbc::RepeatedField<global::Types.TransactionInfo> infos_ = new pbc::RepeatedField<global::Types.TransactionInfo>();
    /// <summary>
    /// The list of corresponding TransactionInfo objects.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Types.TransactionInfo> Infos {
      get { return infos_; }
    }

    /// <summary>Field number for the "events_for_versions" field.</summary>
    public const int EventsForVersionsFieldNumber = 3;
    private global::Types.EventsForVersions eventsForVersions_;
    /// <summary>
    /// The list of corresponding Event objects (only present if fetch_events was set to true in req)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.EventsForVersions EventsForVersions {
      get { return eventsForVersions_; }
      set {
        eventsForVersions_ = value;
      }
    }

    /// <summary>Field number for the "first_transaction_version" field.</summary>
    public const int FirstTransactionVersionFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong?> _single_firstTransactionVersion_codec = pb::FieldCodec.ForStructWrapper<ulong>(34);
    private ulong? firstTransactionVersion_;
    /// <summary>
    /// If the list is not empty, the version of the first transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong? FirstTransactionVersion {
      get { return firstTransactionVersion_; }
      set {
        firstTransactionVersion_ = value;
      }
    }


    /// <summary>Field number for the "proof_of_first_transaction" field.</summary>
    public const int ProofOfFirstTransactionFieldNumber = 5;
    private global::Types.AccumulatorProof proofOfFirstTransaction_;
    /// <summary>
    /// The proofs of the first and last transaction in this chunk. When this is
    /// used for state synchronization, the validator who requests the transactions
    /// will provide a version in the request and the proofs will be relative to
    /// the given version. When this is returned in GetTransactionsResponse, the
    /// proofs will be relative to the ledger info returned in
    /// UpdateToLatestLedgerResponse.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.AccumulatorProof ProofOfFirstTransaction {
      get { return proofOfFirstTransaction_; }
      set {
        proofOfFirstTransaction_ = value;
      }
    }

    /// <summary>Field number for the "proof_of_last_transaction" field.</summary>
    public const int ProofOfLastTransactionFieldNumber = 6;
    private global::Types.AccumulatorProof proofOfLastTransaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.AccumulatorProof ProofOfLastTransaction {
      get { return proofOfLastTransaction_; }
      set {
        proofOfLastTransaction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionListWithProof);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionListWithProof other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!transactions_.Equals(other.transactions_)) return false;
      if(!infos_.Equals(other.infos_)) return false;
      if (!object.Equals(EventsForVersions, other.EventsForVersions)) return false;
      if (FirstTransactionVersion != other.FirstTransactionVersion) return false;
      if (!object.Equals(ProofOfFirstTransaction, other.ProofOfFirstTransaction)) return false;
      if (!object.Equals(ProofOfLastTransaction, other.ProofOfLastTransaction)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= transactions_.GetHashCode();
      hash ^= infos_.GetHashCode();
      if (eventsForVersions_ != null) hash ^= EventsForVersions.GetHashCode();
      if (firstTransactionVersion_ != null) hash ^= FirstTransactionVersion.GetHashCode();
      if (proofOfFirstTransaction_ != null) hash ^= ProofOfFirstTransaction.GetHashCode();
      if (proofOfLastTransaction_ != null) hash ^= ProofOfLastTransaction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      transactions_.WriteTo(output, _repeated_transactions_codec);
      infos_.WriteTo(output, _repeated_infos_codec);
      if (eventsForVersions_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EventsForVersions);
      }
      if (firstTransactionVersion_ != null) {
        _single_firstTransactionVersion_codec.WriteTagAndValue(output, FirstTransactionVersion);
      }
      if (proofOfFirstTransaction_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ProofOfFirstTransaction);
      }
      if (proofOfLastTransaction_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ProofOfLastTransaction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      size += infos_.CalculateSize(_repeated_infos_codec);
      if (eventsForVersions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventsForVersions);
      }
      if (firstTransactionVersion_ != null) {
        size += _single_firstTransactionVersion_codec.CalculateSizeWithTag(FirstTransactionVersion);
      }
      if (proofOfFirstTransaction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProofOfFirstTransaction);
      }
      if (proofOfLastTransaction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProofOfLastTransaction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionListWithProof other) {
      if (other == null) {
        return;
      }
      transactions_.Add(other.transactions_);
      infos_.Add(other.infos_);
      if (other.eventsForVersions_ != null) {
        if (eventsForVersions_ == null) {
          EventsForVersions = new global::Types.EventsForVersions();
        }
        EventsForVersions.MergeFrom(other.EventsForVersions);
      }
      if (other.firstTransactionVersion_ != null) {
        if (firstTransactionVersion_ == null || other.FirstTransactionVersion != 0UL) {
          FirstTransactionVersion = other.FirstTransactionVersion;
        }
      }
      if (other.proofOfFirstTransaction_ != null) {
        if (proofOfFirstTransaction_ == null) {
          ProofOfFirstTransaction = new global::Types.AccumulatorProof();
        }
        ProofOfFirstTransaction.MergeFrom(other.ProofOfFirstTransaction);
      }
      if (other.proofOfLastTransaction_ != null) {
        if (proofOfLastTransaction_ == null) {
          ProofOfLastTransaction = new global::Types.AccumulatorProof();
        }
        ProofOfLastTransaction.MergeFrom(other.ProofOfLastTransaction);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
          case 18: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
          case 26: {
            if (eventsForVersions_ == null) {
              EventsForVersions = new global::Types.EventsForVersions();
            }
            input.ReadMessage(EventsForVersions);
            break;
          }
          case 34: {
            ulong? value = _single_firstTransactionVersion_codec.Read(input);
            if (firstTransactionVersion_ == null || value != 0UL) {
              FirstTransactionVersion = value;
            }
            break;
          }
          case 42: {
            if (proofOfFirstTransaction_ == null) {
              ProofOfFirstTransaction = new global::Types.AccumulatorProof();
            }
            input.ReadMessage(ProofOfFirstTransaction);
            break;
          }
          case 50: {
            if (proofOfLastTransaction_ == null) {
              ProofOfLastTransaction = new global::Types.AccumulatorProof();
            }
            input.ReadMessage(ProofOfLastTransaction);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
