// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/validator_change.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Types {

  /// <summary>Holder for reflection information generated from Protos/validator_change.proto</summary>
  public static partial class ValidatorChangeReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/validator_change.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ValidatorChangeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1Qcm90b3MvdmFsaWRhdG9yX2NoYW5nZS5wcm90bxIFdHlwZXMaE1Byb3Rv",
            "cy9ldmVudHMucHJvdG8aGFByb3Rvcy9sZWRnZXJfaW5mby5wcm90byKQAQod",
            "VmFsaWRhdG9yQ2hhbmdlRXZlbnRXaXRoUHJvb2YSPgoVbGVkZ2VyX2luZm9f",
            "d2l0aF9zaWdzGAEgASgLMh8udHlwZXMuTGVkZ2VySW5mb1dpdGhTaWduYXR1",
            "cmVzEi8KEGV2ZW50X3dpdGhfcHJvb2YYAiABKAsyFS50eXBlcy5FdmVudFdp",
            "dGhQcm9vZmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Types.EventsReflection.Descriptor, global::Types.LedgerInfoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.ValidatorChangeEventWithProof), global::Types.ValidatorChangeEventWithProof.Parser, new[]{ "LedgerInfoWithSigs", "EventWithProof" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// This is used to prove validator changes.  When a validator is changing, it
  /// triggers an event on /validator_change_account/events/sent.  To tell the
  /// client about validator changes, we query
  /// /validator_change_account/events/sent to get all versions that contain
  /// validator changes after the version that we are trying to update from. For
  /// each of these versions, the old validator set would have signed the ledger
  /// info at that version.  The client needs this as well as the event results +
  /// proof.  The client can then verify that these events were under the current
  /// tree and that the changes were signed by the old validators (and that the
  /// events correctly show which validators are the new validators).
  ///
  /// This message represents a single validator change event and the proof that
  /// corresponds to it
  /// </summary>
  public sealed partial class ValidatorChangeEventWithProof : pb::IMessage<ValidatorChangeEventWithProof> {
    private static readonly pb::MessageParser<ValidatorChangeEventWithProof> _parser = new pb::MessageParser<ValidatorChangeEventWithProof>(() => new ValidatorChangeEventWithProof());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValidatorChangeEventWithProof> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.ValidatorChangeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidatorChangeEventWithProof() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidatorChangeEventWithProof(ValidatorChangeEventWithProof other) : this() {
      ledgerInfoWithSigs_ = other.ledgerInfoWithSigs_ != null ? other.ledgerInfoWithSigs_.Clone() : null;
      eventWithProof_ = other.eventWithProof_ != null ? other.eventWithProof_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidatorChangeEventWithProof Clone() {
      return new ValidatorChangeEventWithProof(this);
    }

    /// <summary>Field number for the "ledger_info_with_sigs" field.</summary>
    public const int LedgerInfoWithSigsFieldNumber = 1;
    private global::Types.LedgerInfoWithSignatures ledgerInfoWithSigs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.LedgerInfoWithSignatures LedgerInfoWithSigs {
      get { return ledgerInfoWithSigs_; }
      set {
        ledgerInfoWithSigs_ = value;
      }
    }

    /// <summary>Field number for the "event_with_proof" field.</summary>
    public const int EventWithProofFieldNumber = 2;
    private global::Types.EventWithProof eventWithProof_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.EventWithProof EventWithProof {
      get { return eventWithProof_; }
      set {
        eventWithProof_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValidatorChangeEventWithProof);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValidatorChangeEventWithProof other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LedgerInfoWithSigs, other.LedgerInfoWithSigs)) return false;
      if (!object.Equals(EventWithProof, other.EventWithProof)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ledgerInfoWithSigs_ != null) hash ^= LedgerInfoWithSigs.GetHashCode();
      if (eventWithProof_ != null) hash ^= EventWithProof.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ledgerInfoWithSigs_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LedgerInfoWithSigs);
      }
      if (eventWithProof_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EventWithProof);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ledgerInfoWithSigs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LedgerInfoWithSigs);
      }
      if (eventWithProof_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventWithProof);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValidatorChangeEventWithProof other) {
      if (other == null) {
        return;
      }
      if (other.ledgerInfoWithSigs_ != null) {
        if (ledgerInfoWithSigs_ == null) {
          LedgerInfoWithSigs = new global::Types.LedgerInfoWithSignatures();
        }
        LedgerInfoWithSigs.MergeFrom(other.LedgerInfoWithSigs);
      }
      if (other.eventWithProof_ != null) {
        if (eventWithProof_ == null) {
          EventWithProof = new global::Types.EventWithProof();
        }
        EventWithProof.MergeFrom(other.EventWithProof);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (ledgerInfoWithSigs_ == null) {
              LedgerInfoWithSigs = new global::Types.LedgerInfoWithSignatures();
            }
            input.ReadMessage(LedgerInfoWithSigs);
            break;
          }
          case 18: {
            if (eventWithProof_ == null) {
              EventWithProof = new global::Types.EventWithProof();
            }
            input.ReadMessage(EventWithProof);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
