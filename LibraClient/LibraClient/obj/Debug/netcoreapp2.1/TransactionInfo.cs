// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/transaction_info.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Types {

  /// <summary>Holder for reflection information generated from Protos/transaction_info.proto</summary>
  public static partial class TransactionInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/transaction_info.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TransactionInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1Qcm90b3MvdHJhbnNhY3Rpb25faW5mby5wcm90bxIFdHlwZXMidgoPVHJh",
            "bnNhY3Rpb25JbmZvEh8KF3NpZ25lZF90cmFuc2FjdGlvbl9oYXNoGAEgASgM",
            "EhcKD3N0YXRlX3Jvb3RfaGFzaBgCIAEoDBIXCg9ldmVudF9yb290X2hhc2gY",
            "AyABKAwSEAoIZ2FzX3VzZWQYBCABKARiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.TransactionInfo), global::Types.TransactionInfo.Parser, new[]{ "SignedTransactionHash", "StateRootHash", "EventRootHash", "GasUsed" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// `TransactionInfo` is the object we store in the transaction accumulator. It
  /// consists of the transaction as well as the execution result of this
  /// transaction. This are later returned to the client so that a client can
  /// validate the tree
  /// </summary>
  public sealed partial class TransactionInfo : pb::IMessage<TransactionInfo> {
    private static readonly pb::MessageParser<TransactionInfo> _parser = new pb::MessageParser<TransactionInfo>(() => new TransactionInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.TransactionInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionInfo(TransactionInfo other) : this() {
      signedTransactionHash_ = other.signedTransactionHash_;
      stateRootHash_ = other.stateRootHash_;
      eventRootHash_ = other.eventRootHash_;
      gasUsed_ = other.gasUsed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionInfo Clone() {
      return new TransactionInfo(this);
    }

    /// <summary>Field number for the "signed_transaction_hash" field.</summary>
    public const int SignedTransactionHashFieldNumber = 1;
    private pb::ByteString signedTransactionHash_ = pb::ByteString.Empty;
    /// <summary>
    /// Hash of the signed transaction that is stored
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SignedTransactionHash {
      get { return signedTransactionHash_; }
      set {
        signedTransactionHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state_root_hash" field.</summary>
    public const int StateRootHashFieldNumber = 2;
    private pb::ByteString stateRootHash_ = pb::ByteString.Empty;
    /// <summary>
    /// The root hash of Sparse Merkle Tree describing the world state at the end
    /// of this transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString StateRootHash {
      get { return stateRootHash_; }
      set {
        stateRootHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_root_hash" field.</summary>
    public const int EventRootHashFieldNumber = 3;
    private pb::ByteString eventRootHash_ = pb::ByteString.Empty;
    /// <summary>
    /// The root hash of Merkle Accumulator storing all events emitted during this
    /// transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EventRootHash {
      get { return eventRootHash_; }
      set {
        eventRootHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gas_used" field.</summary>
    public const int GasUsedFieldNumber = 4;
    private ulong gasUsed_;
    /// <summary>
    /// The amount of gas used by this transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GasUsed {
      get { return gasUsed_; }
      set {
        gasUsed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SignedTransactionHash != other.SignedTransactionHash) return false;
      if (StateRootHash != other.StateRootHash) return false;
      if (EventRootHash != other.EventRootHash) return false;
      if (GasUsed != other.GasUsed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SignedTransactionHash.Length != 0) hash ^= SignedTransactionHash.GetHashCode();
      if (StateRootHash.Length != 0) hash ^= StateRootHash.GetHashCode();
      if (EventRootHash.Length != 0) hash ^= EventRootHash.GetHashCode();
      if (GasUsed != 0UL) hash ^= GasUsed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SignedTransactionHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SignedTransactionHash);
      }
      if (StateRootHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(StateRootHash);
      }
      if (EventRootHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EventRootHash);
      }
      if (GasUsed != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(GasUsed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SignedTransactionHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SignedTransactionHash);
      }
      if (StateRootHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(StateRootHash);
      }
      if (EventRootHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EventRootHash);
      }
      if (GasUsed != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GasUsed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionInfo other) {
      if (other == null) {
        return;
      }
      if (other.SignedTransactionHash.Length != 0) {
        SignedTransactionHash = other.SignedTransactionHash;
      }
      if (other.StateRootHash.Length != 0) {
        StateRootHash = other.StateRootHash;
      }
      if (other.EventRootHash.Length != 0) {
        EventRootHash = other.EventRootHash;
      }
      if (other.GasUsed != 0UL) {
        GasUsed = other.GasUsed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SignedTransactionHash = input.ReadBytes();
            break;
          }
          case 18: {
            StateRootHash = input.ReadBytes();
            break;
          }
          case 26: {
            EventRootHash = input.ReadBytes();
            break;
          }
          case 32: {
            GasUsed = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
