// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/proof.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Types {

  /// <summary>Holder for reflection information generated from Protos/proof.proto</summary>
  public static partial class ProofReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/proof.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProofReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJQcm90b3MvcHJvb2YucHJvdG8SBXR5cGVzGh1Qcm90b3MvdHJhbnNhY3Rp",
            "b25faW5mby5wcm90byJAChBBY2N1bXVsYXRvclByb29mEg4KBmJpdG1hcBgB",
            "IAEoBBIcChRub25fZGVmYXVsdF9zaWJsaW5ncxgCIAMoDCJPChFTcGFyc2VN",
            "ZXJrbGVQcm9vZhIMCgRsZWFmGAEgASgMEg4KBmJpdG1hcBgCIAEoDBIcChRu",
            "b25fZGVmYXVsdF9zaWJsaW5ncxgDIAMoDCKSAQoWU2lnbmVkVHJhbnNhY3Rp",
            "b25Qcm9vZhJGCiVsZWRnZXJfaW5mb190b190cmFuc2FjdGlvbl9pbmZvX3By",
            "b29mGAEgASgLMhcudHlwZXMuQWNjdW11bGF0b3JQcm9vZhIwChB0cmFuc2Fj",
            "dGlvbl9pbmZvGAIgASgLMhYudHlwZXMuVHJhbnNhY3Rpb25JbmZvItIBChFB",
            "Y2NvdW50U3RhdGVQcm9vZhJGCiVsZWRnZXJfaW5mb190b190cmFuc2FjdGlv",
            "bl9pbmZvX3Byb29mGAEgASgLMhcudHlwZXMuQWNjdW11bGF0b3JQcm9vZhIw",
            "ChB0cmFuc2FjdGlvbl9pbmZvGAIgASgLMhYudHlwZXMuVHJhbnNhY3Rpb25J",
            "bmZvEkMKIXRyYW5zYWN0aW9uX2luZm9fdG9fYWNjb3VudF9wcm9vZhgDIAEo",
            "CzIYLnR5cGVzLlNwYXJzZU1lcmtsZVByb29mIsgBCgpFdmVudFByb29mEkYK",
            "JWxlZGdlcl9pbmZvX3RvX3RyYW5zYWN0aW9uX2luZm9fcHJvb2YYASABKAsy",
            "Fy50eXBlcy5BY2N1bXVsYXRvclByb29mEjAKEHRyYW5zYWN0aW9uX2luZm8Y",
            "AiABKAsyFi50eXBlcy5UcmFuc2FjdGlvbkluZm8SQAofdHJhbnNhY3Rpb25f",
            "aW5mb190b19ldmVudF9wcm9vZhgDIAEoCzIXLnR5cGVzLkFjY3VtdWxhdG9y",
            "UHJvb2ZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Types.TransactionInfoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.AccumulatorProof), global::Types.AccumulatorProof.Parser, new[]{ "Bitmap", "NonDefaultSiblings" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.SparseMerkleProof), global::Types.SparseMerkleProof.Parser, new[]{ "Leaf", "Bitmap", "NonDefaultSiblings" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.SignedTransactionProof), global::Types.SignedTransactionProof.Parser, new[]{ "LedgerInfoToTransactionInfoProof", "TransactionInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.AccountStateProof), global::Types.AccountStateProof.Parser, new[]{ "LedgerInfoToTransactionInfoProof", "TransactionInfo", "TransactionInfoToAccountProof" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.EventProof), global::Types.EventProof.Parser, new[]{ "LedgerInfoToTransactionInfoProof", "TransactionInfo", "TransactionInfoToEventProof" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AccumulatorProof : pb::IMessage<AccumulatorProof> {
    private static readonly pb::MessageParser<AccumulatorProof> _parser = new pb::MessageParser<AccumulatorProof>(() => new AccumulatorProof());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccumulatorProof> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.ProofReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccumulatorProof() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccumulatorProof(AccumulatorProof other) : this() {
      bitmap_ = other.bitmap_;
      nonDefaultSiblings_ = other.nonDefaultSiblings_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccumulatorProof Clone() {
      return new AccumulatorProof(this);
    }

    /// <summary>Field number for the "bitmap" field.</summary>
    public const int BitmapFieldNumber = 1;
    private ulong bitmap_;
    /// <summary>
    /// The bitmap indicating which siblings are default. 1 means non-default and
    /// 0 means default. The LSB corresponds to the sibling at the bottom of the
    /// accumulator. The leftmost 1-bit corresponds to the sibling at the level
    /// just below root level in the accumulator, since this one is always
    /// non-default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Bitmap {
      get { return bitmap_; }
      set {
        bitmap_ = value;
      }
    }

    /// <summary>Field number for the "non_default_siblings" field.</summary>
    public const int NonDefaultSiblingsFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_nonDefaultSiblings_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> nonDefaultSiblings_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// The non-default siblings. The ones near the root are at the beginning of
    /// the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> NonDefaultSiblings {
      get { return nonDefaultSiblings_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccumulatorProof);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccumulatorProof other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Bitmap != other.Bitmap) return false;
      if(!nonDefaultSiblings_.Equals(other.nonDefaultSiblings_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Bitmap != 0UL) hash ^= Bitmap.GetHashCode();
      hash ^= nonDefaultSiblings_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Bitmap != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Bitmap);
      }
      nonDefaultSiblings_.WriteTo(output, _repeated_nonDefaultSiblings_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Bitmap != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bitmap);
      }
      size += nonDefaultSiblings_.CalculateSize(_repeated_nonDefaultSiblings_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccumulatorProof other) {
      if (other == null) {
        return;
      }
      if (other.Bitmap != 0UL) {
        Bitmap = other.Bitmap;
      }
      nonDefaultSiblings_.Add(other.nonDefaultSiblings_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Bitmap = input.ReadUInt64();
            break;
          }
          case 18: {
            nonDefaultSiblings_.AddEntriesFrom(input, _repeated_nonDefaultSiblings_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SparseMerkleProof : pb::IMessage<SparseMerkleProof> {
    private static readonly pb::MessageParser<SparseMerkleProof> _parser = new pb::MessageParser<SparseMerkleProof>(() => new SparseMerkleProof());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SparseMerkleProof> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.ProofReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SparseMerkleProof() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SparseMerkleProof(SparseMerkleProof other) : this() {
      leaf_ = other.leaf_;
      bitmap_ = other.bitmap_;
      nonDefaultSiblings_ = other.nonDefaultSiblings_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SparseMerkleProof Clone() {
      return new SparseMerkleProof(this);
    }

    /// <summary>Field number for the "leaf" field.</summary>
    public const int LeafFieldNumber = 1;
    private pb::ByteString leaf_ = pb::ByteString.Empty;
    /// <summary>
    /// This proof can be used to authenticate whether a given leaf exists in the
    /// tree or not. In Rust:
    ///   - If this is `Some(HashValue, HashValue)`
    ///     - If the first `HashValue` equals requested key, this is an inclusion
    ///       proof and the second `HashValue` equals the hash of the
    ///       corresponding account blob.
    ///     - Otherwise this is a non-inclusion proof. The first `HashValue` is
    ///       the only key that exists in the subtree and the second `HashValue`
    ///       equals the hash of the corresponding account blob.
    ///   - If this is `None`, this is also a non-inclusion proof which indicates
    ///     the subtree is empty.
    ///
    /// In protobuf, this leaf field should either be
    ///   - empty, which corresponds to None in the Rust structure.
    ///   - exactly 64 bytes, which corresponds to Some&lt;(HashValue, HashValue)>
    ///     in the Rust structure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Leaf {
      get { return leaf_; }
      set {
        leaf_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bitmap" field.</summary>
    public const int BitmapFieldNumber = 2;
    private pb::ByteString bitmap_ = pb::ByteString.Empty;
    /// <summary>
    /// The bitmap indicating which siblings are default. 1 means non-default and
    /// 0 means default. The MSB of the first byte corresponds to the sibling at
    /// the top of the Sparse Merkle Tree. The rightmost 1-bit of the last byte
    /// corresponds to the sibling at the bottom, since this one is always
    /// non-default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Bitmap {
      get { return bitmap_; }
      set {
        bitmap_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "non_default_siblings" field.</summary>
    public const int NonDefaultSiblingsFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_nonDefaultSiblings_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> nonDefaultSiblings_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// The non-default siblings. The ones near the root are at the beginning of
    /// the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> NonDefaultSiblings {
      get { return nonDefaultSiblings_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SparseMerkleProof);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SparseMerkleProof other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Leaf != other.Leaf) return false;
      if (Bitmap != other.Bitmap) return false;
      if(!nonDefaultSiblings_.Equals(other.nonDefaultSiblings_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Leaf.Length != 0) hash ^= Leaf.GetHashCode();
      if (Bitmap.Length != 0) hash ^= Bitmap.GetHashCode();
      hash ^= nonDefaultSiblings_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Leaf.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Leaf);
      }
      if (Bitmap.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Bitmap);
      }
      nonDefaultSiblings_.WriteTo(output, _repeated_nonDefaultSiblings_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Leaf.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Leaf);
      }
      if (Bitmap.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bitmap);
      }
      size += nonDefaultSiblings_.CalculateSize(_repeated_nonDefaultSiblings_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SparseMerkleProof other) {
      if (other == null) {
        return;
      }
      if (other.Leaf.Length != 0) {
        Leaf = other.Leaf;
      }
      if (other.Bitmap.Length != 0) {
        Bitmap = other.Bitmap;
      }
      nonDefaultSiblings_.Add(other.nonDefaultSiblings_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Leaf = input.ReadBytes();
            break;
          }
          case 18: {
            Bitmap = input.ReadBytes();
            break;
          }
          case 26: {
            nonDefaultSiblings_.AddEntriesFrom(input, _repeated_nonDefaultSiblings_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The complete proof used to authenticate a signed transaction.
  /// </summary>
  public sealed partial class SignedTransactionProof : pb::IMessage<SignedTransactionProof> {
    private static readonly pb::MessageParser<SignedTransactionProof> _parser = new pb::MessageParser<SignedTransactionProof>(() => new SignedTransactionProof());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignedTransactionProof> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.ProofReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedTransactionProof() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedTransactionProof(SignedTransactionProof other) : this() {
      ledgerInfoToTransactionInfoProof_ = other.ledgerInfoToTransactionInfoProof_ != null ? other.ledgerInfoToTransactionInfoProof_.Clone() : null;
      transactionInfo_ = other.transactionInfo_ != null ? other.transactionInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedTransactionProof Clone() {
      return new SignedTransactionProof(this);
    }

    /// <summary>Field number for the "ledger_info_to_transaction_info_proof" field.</summary>
    public const int LedgerInfoToTransactionInfoProofFieldNumber = 1;
    private global::Types.AccumulatorProof ledgerInfoToTransactionInfoProof_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.AccumulatorProof LedgerInfoToTransactionInfoProof {
      get { return ledgerInfoToTransactionInfoProof_; }
      set {
        ledgerInfoToTransactionInfoProof_ = value;
      }
    }

    /// <summary>Field number for the "transaction_info" field.</summary>
    public const int TransactionInfoFieldNumber = 2;
    private global::Types.TransactionInfo transactionInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.TransactionInfo TransactionInfo {
      get { return transactionInfo_; }
      set {
        transactionInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignedTransactionProof);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignedTransactionProof other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LedgerInfoToTransactionInfoProof, other.LedgerInfoToTransactionInfoProof)) return false;
      if (!object.Equals(TransactionInfo, other.TransactionInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ledgerInfoToTransactionInfoProof_ != null) hash ^= LedgerInfoToTransactionInfoProof.GetHashCode();
      if (transactionInfo_ != null) hash ^= TransactionInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ledgerInfoToTransactionInfoProof_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LedgerInfoToTransactionInfoProof);
      }
      if (transactionInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TransactionInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ledgerInfoToTransactionInfoProof_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LedgerInfoToTransactionInfoProof);
      }
      if (transactionInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransactionInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignedTransactionProof other) {
      if (other == null) {
        return;
      }
      if (other.ledgerInfoToTransactionInfoProof_ != null) {
        if (ledgerInfoToTransactionInfoProof_ == null) {
          LedgerInfoToTransactionInfoProof = new global::Types.AccumulatorProof();
        }
        LedgerInfoToTransactionInfoProof.MergeFrom(other.LedgerInfoToTransactionInfoProof);
      }
      if (other.transactionInfo_ != null) {
        if (transactionInfo_ == null) {
          TransactionInfo = new global::Types.TransactionInfo();
        }
        TransactionInfo.MergeFrom(other.TransactionInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (ledgerInfoToTransactionInfoProof_ == null) {
              LedgerInfoToTransactionInfoProof = new global::Types.AccumulatorProof();
            }
            input.ReadMessage(LedgerInfoToTransactionInfoProof);
            break;
          }
          case 18: {
            if (transactionInfo_ == null) {
              TransactionInfo = new global::Types.TransactionInfo();
            }
            input.ReadMessage(TransactionInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The complete proof used to authenticate an account state.
  /// </summary>
  public sealed partial class AccountStateProof : pb::IMessage<AccountStateProof> {
    private static readonly pb::MessageParser<AccountStateProof> _parser = new pb::MessageParser<AccountStateProof>(() => new AccountStateProof());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountStateProof> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.ProofReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountStateProof() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountStateProof(AccountStateProof other) : this() {
      ledgerInfoToTransactionInfoProof_ = other.ledgerInfoToTransactionInfoProof_ != null ? other.ledgerInfoToTransactionInfoProof_.Clone() : null;
      transactionInfo_ = other.transactionInfo_ != null ? other.transactionInfo_.Clone() : null;
      transactionInfoToAccountProof_ = other.transactionInfoToAccountProof_ != null ? other.transactionInfoToAccountProof_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountStateProof Clone() {
      return new AccountStateProof(this);
    }

    /// <summary>Field number for the "ledger_info_to_transaction_info_proof" field.</summary>
    public const int LedgerInfoToTransactionInfoProofFieldNumber = 1;
    private global::Types.AccumulatorProof ledgerInfoToTransactionInfoProof_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.AccumulatorProof LedgerInfoToTransactionInfoProof {
      get { return ledgerInfoToTransactionInfoProof_; }
      set {
        ledgerInfoToTransactionInfoProof_ = value;
      }
    }

    /// <summary>Field number for the "transaction_info" field.</summary>
    public const int TransactionInfoFieldNumber = 2;
    private global::Types.TransactionInfo transactionInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.TransactionInfo TransactionInfo {
      get { return transactionInfo_; }
      set {
        transactionInfo_ = value;
      }
    }

    /// <summary>Field number for the "transaction_info_to_account_proof" field.</summary>
    public const int TransactionInfoToAccountProofFieldNumber = 3;
    private global::Types.SparseMerkleProof transactionInfoToAccountProof_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.SparseMerkleProof TransactionInfoToAccountProof {
      get { return transactionInfoToAccountProof_; }
      set {
        transactionInfoToAccountProof_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountStateProof);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountStateProof other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LedgerInfoToTransactionInfoProof, other.LedgerInfoToTransactionInfoProof)) return false;
      if (!object.Equals(TransactionInfo, other.TransactionInfo)) return false;
      if (!object.Equals(TransactionInfoToAccountProof, other.TransactionInfoToAccountProof)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ledgerInfoToTransactionInfoProof_ != null) hash ^= LedgerInfoToTransactionInfoProof.GetHashCode();
      if (transactionInfo_ != null) hash ^= TransactionInfo.GetHashCode();
      if (transactionInfoToAccountProof_ != null) hash ^= TransactionInfoToAccountProof.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ledgerInfoToTransactionInfoProof_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LedgerInfoToTransactionInfoProof);
      }
      if (transactionInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TransactionInfo);
      }
      if (transactionInfoToAccountProof_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TransactionInfoToAccountProof);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ledgerInfoToTransactionInfoProof_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LedgerInfoToTransactionInfoProof);
      }
      if (transactionInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransactionInfo);
      }
      if (transactionInfoToAccountProof_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransactionInfoToAccountProof);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountStateProof other) {
      if (other == null) {
        return;
      }
      if (other.ledgerInfoToTransactionInfoProof_ != null) {
        if (ledgerInfoToTransactionInfoProof_ == null) {
          LedgerInfoToTransactionInfoProof = new global::Types.AccumulatorProof();
        }
        LedgerInfoToTransactionInfoProof.MergeFrom(other.LedgerInfoToTransactionInfoProof);
      }
      if (other.transactionInfo_ != null) {
        if (transactionInfo_ == null) {
          TransactionInfo = new global::Types.TransactionInfo();
        }
        TransactionInfo.MergeFrom(other.TransactionInfo);
      }
      if (other.transactionInfoToAccountProof_ != null) {
        if (transactionInfoToAccountProof_ == null) {
          TransactionInfoToAccountProof = new global::Types.SparseMerkleProof();
        }
        TransactionInfoToAccountProof.MergeFrom(other.TransactionInfoToAccountProof);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (ledgerInfoToTransactionInfoProof_ == null) {
              LedgerInfoToTransactionInfoProof = new global::Types.AccumulatorProof();
            }
            input.ReadMessage(LedgerInfoToTransactionInfoProof);
            break;
          }
          case 18: {
            if (transactionInfo_ == null) {
              TransactionInfo = new global::Types.TransactionInfo();
            }
            input.ReadMessage(TransactionInfo);
            break;
          }
          case 26: {
            if (transactionInfoToAccountProof_ == null) {
              TransactionInfoToAccountProof = new global::Types.SparseMerkleProof();
            }
            input.ReadMessage(TransactionInfoToAccountProof);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The complete proof used to authenticate an event.
  /// </summary>
  public sealed partial class EventProof : pb::IMessage<EventProof> {
    private static readonly pb::MessageParser<EventProof> _parser = new pb::MessageParser<EventProof>(() => new EventProof());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventProof> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.ProofReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventProof() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventProof(EventProof other) : this() {
      ledgerInfoToTransactionInfoProof_ = other.ledgerInfoToTransactionInfoProof_ != null ? other.ledgerInfoToTransactionInfoProof_.Clone() : null;
      transactionInfo_ = other.transactionInfo_ != null ? other.transactionInfo_.Clone() : null;
      transactionInfoToEventProof_ = other.transactionInfoToEventProof_ != null ? other.transactionInfoToEventProof_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventProof Clone() {
      return new EventProof(this);
    }

    /// <summary>Field number for the "ledger_info_to_transaction_info_proof" field.</summary>
    public const int LedgerInfoToTransactionInfoProofFieldNumber = 1;
    private global::Types.AccumulatorProof ledgerInfoToTransactionInfoProof_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.AccumulatorProof LedgerInfoToTransactionInfoProof {
      get { return ledgerInfoToTransactionInfoProof_; }
      set {
        ledgerInfoToTransactionInfoProof_ = value;
      }
    }

    /// <summary>Field number for the "transaction_info" field.</summary>
    public const int TransactionInfoFieldNumber = 2;
    private global::Types.TransactionInfo transactionInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.TransactionInfo TransactionInfo {
      get { return transactionInfo_; }
      set {
        transactionInfo_ = value;
      }
    }

    /// <summary>Field number for the "transaction_info_to_event_proof" field.</summary>
    public const int TransactionInfoToEventProofFieldNumber = 3;
    private global::Types.AccumulatorProof transactionInfoToEventProof_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.AccumulatorProof TransactionInfoToEventProof {
      get { return transactionInfoToEventProof_; }
      set {
        transactionInfoToEventProof_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventProof);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventProof other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LedgerInfoToTransactionInfoProof, other.LedgerInfoToTransactionInfoProof)) return false;
      if (!object.Equals(TransactionInfo, other.TransactionInfo)) return false;
      if (!object.Equals(TransactionInfoToEventProof, other.TransactionInfoToEventProof)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ledgerInfoToTransactionInfoProof_ != null) hash ^= LedgerInfoToTransactionInfoProof.GetHashCode();
      if (transactionInfo_ != null) hash ^= TransactionInfo.GetHashCode();
      if (transactionInfoToEventProof_ != null) hash ^= TransactionInfoToEventProof.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ledgerInfoToTransactionInfoProof_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LedgerInfoToTransactionInfoProof);
      }
      if (transactionInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TransactionInfo);
      }
      if (transactionInfoToEventProof_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TransactionInfoToEventProof);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ledgerInfoToTransactionInfoProof_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LedgerInfoToTransactionInfoProof);
      }
      if (transactionInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransactionInfo);
      }
      if (transactionInfoToEventProof_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransactionInfoToEventProof);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventProof other) {
      if (other == null) {
        return;
      }
      if (other.ledgerInfoToTransactionInfoProof_ != null) {
        if (ledgerInfoToTransactionInfoProof_ == null) {
          LedgerInfoToTransactionInfoProof = new global::Types.AccumulatorProof();
        }
        LedgerInfoToTransactionInfoProof.MergeFrom(other.LedgerInfoToTransactionInfoProof);
      }
      if (other.transactionInfo_ != null) {
        if (transactionInfo_ == null) {
          TransactionInfo = new global::Types.TransactionInfo();
        }
        TransactionInfo.MergeFrom(other.TransactionInfo);
      }
      if (other.transactionInfoToEventProof_ != null) {
        if (transactionInfoToEventProof_ == null) {
          TransactionInfoToEventProof = new global::Types.AccumulatorProof();
        }
        TransactionInfoToEventProof.MergeFrom(other.TransactionInfoToEventProof);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (ledgerInfoToTransactionInfoProof_ == null) {
              LedgerInfoToTransactionInfoProof = new global::Types.AccumulatorProof();
            }
            input.ReadMessage(LedgerInfoToTransactionInfoProof);
            break;
          }
          case 18: {
            if (transactionInfo_ == null) {
              TransactionInfo = new global::Types.TransactionInfo();
            }
            input.ReadMessage(TransactionInfo);
            break;
          }
          case 26: {
            if (transactionInfoToEventProof_ == null) {
              TransactionInfoToEventProof = new global::Types.AccumulatorProof();
            }
            input.ReadMessage(TransactionInfoToEventProof);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
