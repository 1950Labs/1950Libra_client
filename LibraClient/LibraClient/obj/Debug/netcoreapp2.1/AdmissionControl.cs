// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/admission_control.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AdmissionControl {

  /// <summary>Holder for reflection information generated from Protos/admission_control.proto</summary>
  public static partial class AdmissionControlReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/admission_control.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AdmissionControlReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5Qcm90b3MvYWRtaXNzaW9uX2NvbnRyb2wucHJvdG8SEWFkbWlzc2lvbl9j",
            "b250cm9sGhtQcm90b3MvZ2V0X3dpdGhfcHJvb2YucHJvdG8aG1Byb3Rvcy9t",
            "ZW1wb29sX3N0YXR1cy5wcm90bxoYUHJvdG9zL3RyYW5zYWN0aW9uLnByb3Rv",
            "GhZQcm90b3Mvdm1fZXJyb3JzLnByb3RvIkgKGFN1Ym1pdFRyYW5zYWN0aW9u",
            "UmVxdWVzdBIsCgpzaWduZWRfdHhuGAEgASgLMhgudHlwZXMuU2lnbmVkVHJh",
            "bnNhY3Rpb24iZgoWQWRtaXNzaW9uQ29udHJvbFN0YXR1cxI7CgRjb2RlGAEg",
            "ASgOMi0uYWRtaXNzaW9uX2NvbnRyb2wuQWRtaXNzaW9uQ29udHJvbFN0YXR1",
            "c0NvZGUSDwoHbWVzc2FnZRgCIAEoCSLhAQoZU3VibWl0VHJhbnNhY3Rpb25S",
            "ZXNwb25zZRIkCgl2bV9zdGF0dXMYASABKAsyDy50eXBlcy5WTVN0YXR1c0gA",
            "Ej4KCWFjX3N0YXR1cxgCIAEoCzIpLmFkbWlzc2lvbl9jb250cm9sLkFkbWlz",
            "c2lvbkNvbnRyb2xTdGF0dXNIABI+Cg5tZW1wb29sX3N0YXR1cxgDIAEoCzIk",
            "Lm1lbXBvb2wuTWVtcG9vbEFkZFRyYW5zYWN0aW9uU3RhdHVzSAASFAoMdmFs",
            "aWRhdG9yX2lkGAQgASgMQggKBnN0YXR1cypJChpBZG1pc3Npb25Db250cm9s",
            "U3RhdHVzQ29kZRIMCghBY2NlcHRlZBAAEg8KC0JsYWNrbGlzdGVkEAESDAoI",
            "UmVqZWN0ZWQQAjLnAQoQQWRtaXNzaW9uQ29udHJvbBJwChFTdWJtaXRUcmFu",
            "c2FjdGlvbhIrLmFkbWlzc2lvbl9jb250cm9sLlN1Ym1pdFRyYW5zYWN0aW9u",
            "UmVxdWVzdBosLmFkbWlzc2lvbl9jb250cm9sLlN1Ym1pdFRyYW5zYWN0aW9u",
            "UmVzcG9uc2UiABJhChRVcGRhdGVUb0xhdGVzdExlZGdlchIiLnR5cGVzLlVw",
            "ZGF0ZVRvTGF0ZXN0TGVkZ2VyUmVxdWVzdBojLnR5cGVzLlVwZGF0ZVRvTGF0",
            "ZXN0TGVkZ2VyUmVzcG9uc2UiAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Types.GetWithProofReflection.Descriptor, global::Mempool.MempoolStatusReflection.Descriptor, global::Types.TransactionReflection.Descriptor, global::Types.VmErrorsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::AdmissionControl.AdmissionControlStatusCode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AdmissionControl.SubmitTransactionRequest), global::AdmissionControl.SubmitTransactionRequest.Parser, new[]{ "SignedTxn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AdmissionControl.AdmissionControlStatus), global::AdmissionControl.AdmissionControlStatus.Parser, new[]{ "Code", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AdmissionControl.SubmitTransactionResponse), global::AdmissionControl.SubmitTransactionResponse.Parser, new[]{ "VmStatus", "AcStatus", "MempoolStatus", "ValidatorId" }, new[]{ "Status" }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Additional statuses that are possible from admission control in addition
  /// to VM statuses.
  /// </summary>
  public enum AdmissionControlStatusCode {
    /// <summary>
    /// Validator accepted the transaction.
    /// </summary>
    [pbr::OriginalName("Accepted")] Accepted = 0,
    /// <summary>
    /// The sender is blacklisted.
    /// </summary>
    [pbr::OriginalName("Blacklisted")] Blacklisted = 1,
    /// <summary>
    /// The transaction is rejected, e.g. due to incorrect signature.
    /// </summary>
    [pbr::OriginalName("Rejected")] Rejected = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// -----------------------------------------------------------------------------
  /// ---------------- Submit transaction
  /// -----------------------------------------------------------------------------
  /// The request for transaction submission.
  /// </summary>
  public sealed partial class SubmitTransactionRequest : pb::IMessage<SubmitTransactionRequest> {
    private static readonly pb::MessageParser<SubmitTransactionRequest> _parser = new pb::MessageParser<SubmitTransactionRequest>(() => new SubmitTransactionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubmitTransactionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AdmissionControl.AdmissionControlReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitTransactionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitTransactionRequest(SubmitTransactionRequest other) : this() {
      signedTxn_ = other.signedTxn_ != null ? other.signedTxn_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitTransactionRequest Clone() {
      return new SubmitTransactionRequest(this);
    }

    /// <summary>Field number for the "signed_txn" field.</summary>
    public const int SignedTxnFieldNumber = 1;
    private global::Types.SignedTransaction signedTxn_;
    /// <summary>
    /// Transaction signed by wallet.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.SignedTransaction SignedTxn {
      get { return signedTxn_; }
      set {
        signedTxn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubmitTransactionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubmitTransactionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SignedTxn, other.SignedTxn)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (signedTxn_ != null) hash ^= SignedTxn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (signedTxn_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SignedTxn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (signedTxn_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignedTxn);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubmitTransactionRequest other) {
      if (other == null) {
        return;
      }
      if (other.signedTxn_ != null) {
        if (signedTxn_ == null) {
          SignedTxn = new global::Types.SignedTransaction();
        }
        SignedTxn.MergeFrom(other.SignedTxn);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (signedTxn_ == null) {
              SignedTxn = new global::Types.SignedTransaction();
            }
            input.ReadMessage(SignedTxn);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// AC response status containing code and optionally an error message.
  /// </summary>
  public sealed partial class AdmissionControlStatus : pb::IMessage<AdmissionControlStatus> {
    private static readonly pb::MessageParser<AdmissionControlStatus> _parser = new pb::MessageParser<AdmissionControlStatus>(() => new AdmissionControlStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdmissionControlStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AdmissionControl.AdmissionControlReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdmissionControlStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdmissionControlStatus(AdmissionControlStatus other) : this() {
      code_ = other.code_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdmissionControlStatus Clone() {
      return new AdmissionControlStatus(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::AdmissionControl.AdmissionControlStatusCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AdmissionControl.AdmissionControlStatusCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdmissionControlStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdmissionControlStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdmissionControlStatus other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::AdmissionControl.AdmissionControlStatusCode) input.ReadEnum();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The response for transaction submission.
  ///
  /// How does a client know if their transaction was included?
  /// A response from the transaction submission only means that the transaction
  /// was successfully added to mempool, but not that it is guaranteed to be
  /// included in the chain.  Each transaction should include an expiration time in
  /// the signed transaction.  Let's call this T0.  As a client, I submit my
  /// transaction to a validator. I now need to poll for the transaction I
  /// submitted.  I can use the query that takes my account and sequence number. If
  /// I receive back that the transaction is completed, I will verify the proofs to
  /// ensure that this is the transaction I expected.  If I receive a response that
  /// my transaction is not yet completed, I must check the latest timestamp in the
  /// ledgerInfo that I receive back from the query.  If this time is greater than
  /// T0, I can be certain that my transaction will never be included.  If this
  /// time is less than T0, I need to continue polling.
  /// </summary>
  public sealed partial class SubmitTransactionResponse : pb::IMessage<SubmitTransactionResponse> {
    private static readonly pb::MessageParser<SubmitTransactionResponse> _parser = new pb::MessageParser<SubmitTransactionResponse>(() => new SubmitTransactionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubmitTransactionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AdmissionControl.AdmissionControlReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitTransactionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitTransactionResponse(SubmitTransactionResponse other) : this() {
      validatorId_ = other.validatorId_;
      switch (other.StatusCase) {
        case StatusOneofCase.VmStatus:
          VmStatus = other.VmStatus.Clone();
          break;
        case StatusOneofCase.AcStatus:
          AcStatus = other.AcStatus.Clone();
          break;
        case StatusOneofCase.MempoolStatus:
          MempoolStatus = other.MempoolStatus.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitTransactionResponse Clone() {
      return new SubmitTransactionResponse(this);
    }

    /// <summary>Field number for the "vm_status" field.</summary>
    public const int VmStatusFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.VMStatus VmStatus {
      get { return statusCase_ == StatusOneofCase.VmStatus ? (global::Types.VMStatus) status_ : null; }
      set {
        status_ = value;
        statusCase_ = value == null ? StatusOneofCase.None : StatusOneofCase.VmStatus;
      }
    }

    /// <summary>Field number for the "ac_status" field.</summary>
    public const int AcStatusFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AdmissionControl.AdmissionControlStatus AcStatus {
      get { return statusCase_ == StatusOneofCase.AcStatus ? (global::AdmissionControl.AdmissionControlStatus) status_ : null; }
      set {
        status_ = value;
        statusCase_ = value == null ? StatusOneofCase.None : StatusOneofCase.AcStatus;
      }
    }

    /// <summary>Field number for the "mempool_status" field.</summary>
    public const int MempoolStatusFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Mempool.MempoolAddTransactionStatus MempoolStatus {
      get { return statusCase_ == StatusOneofCase.MempoolStatus ? (global::Mempool.MempoolAddTransactionStatus) status_ : null; }
      set {
        status_ = value;
        statusCase_ = value == null ? StatusOneofCase.None : StatusOneofCase.MempoolStatus;
      }
    }

    /// <summary>Field number for the "validator_id" field.</summary>
    public const int ValidatorIdFieldNumber = 4;
    private pb::ByteString validatorId_ = pb::ByteString.Empty;
    /// <summary>
    /// Public key(id) of the validator that processed this transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ValidatorId {
      get { return validatorId_; }
      set {
        validatorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object status_;
    /// <summary>Enum of possible cases for the "status" oneof.</summary>
    public enum StatusOneofCase {
      None = 0,
      VmStatus = 1,
      AcStatus = 2,
      MempoolStatus = 3,
    }
    private StatusOneofCase statusCase_ = StatusOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusOneofCase StatusCase {
      get { return statusCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      statusCase_ = StatusOneofCase.None;
      status_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubmitTransactionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubmitTransactionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(VmStatus, other.VmStatus)) return false;
      if (!object.Equals(AcStatus, other.AcStatus)) return false;
      if (!object.Equals(MempoolStatus, other.MempoolStatus)) return false;
      if (ValidatorId != other.ValidatorId) return false;
      if (StatusCase != other.StatusCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (statusCase_ == StatusOneofCase.VmStatus) hash ^= VmStatus.GetHashCode();
      if (statusCase_ == StatusOneofCase.AcStatus) hash ^= AcStatus.GetHashCode();
      if (statusCase_ == StatusOneofCase.MempoolStatus) hash ^= MempoolStatus.GetHashCode();
      if (ValidatorId.Length != 0) hash ^= ValidatorId.GetHashCode();
      hash ^= (int) statusCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (statusCase_ == StatusOneofCase.VmStatus) {
        output.WriteRawTag(10);
        output.WriteMessage(VmStatus);
      }
      if (statusCase_ == StatusOneofCase.AcStatus) {
        output.WriteRawTag(18);
        output.WriteMessage(AcStatus);
      }
      if (statusCase_ == StatusOneofCase.MempoolStatus) {
        output.WriteRawTag(26);
        output.WriteMessage(MempoolStatus);
      }
      if (ValidatorId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ValidatorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (statusCase_ == StatusOneofCase.VmStatus) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VmStatus);
      }
      if (statusCase_ == StatusOneofCase.AcStatus) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AcStatus);
      }
      if (statusCase_ == StatusOneofCase.MempoolStatus) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MempoolStatus);
      }
      if (ValidatorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ValidatorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubmitTransactionResponse other) {
      if (other == null) {
        return;
      }
      if (other.ValidatorId.Length != 0) {
        ValidatorId = other.ValidatorId;
      }
      switch (other.StatusCase) {
        case StatusOneofCase.VmStatus:
          if (VmStatus == null) {
            VmStatus = new global::Types.VMStatus();
          }
          VmStatus.MergeFrom(other.VmStatus);
          break;
        case StatusOneofCase.AcStatus:
          if (AcStatus == null) {
            AcStatus = new global::AdmissionControl.AdmissionControlStatus();
          }
          AcStatus.MergeFrom(other.AcStatus);
          break;
        case StatusOneofCase.MempoolStatus:
          if (MempoolStatus == null) {
            MempoolStatus = new global::Mempool.MempoolAddTransactionStatus();
          }
          MempoolStatus.MergeFrom(other.MempoolStatus);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Types.VMStatus subBuilder = new global::Types.VMStatus();
            if (statusCase_ == StatusOneofCase.VmStatus) {
              subBuilder.MergeFrom(VmStatus);
            }
            input.ReadMessage(subBuilder);
            VmStatus = subBuilder;
            break;
          }
          case 18: {
            global::AdmissionControl.AdmissionControlStatus subBuilder = new global::AdmissionControl.AdmissionControlStatus();
            if (statusCase_ == StatusOneofCase.AcStatus) {
              subBuilder.MergeFrom(AcStatus);
            }
            input.ReadMessage(subBuilder);
            AcStatus = subBuilder;
            break;
          }
          case 26: {
            global::Mempool.MempoolAddTransactionStatus subBuilder = new global::Mempool.MempoolAddTransactionStatus();
            if (statusCase_ == StatusOneofCase.MempoolStatus) {
              subBuilder.MergeFrom(MempoolStatus);
            }
            input.ReadMessage(subBuilder);
            MempoolStatus = subBuilder;
            break;
          }
          case 34: {
            ValidatorId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
