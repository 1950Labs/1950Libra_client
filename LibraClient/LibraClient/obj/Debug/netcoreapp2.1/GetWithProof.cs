// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/get_with_proof.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Types {

  /// <summary>Holder for reflection information generated from Protos/get_with_proof.proto</summary>
  public static partial class GetWithProofReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/get_with_proof.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GetWithProofReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtQcm90b3MvZ2V0X3dpdGhfcHJvb2YucHJvdG8SBXR5cGVzGhhQcm90b3Mv",
            "YWNjZXNzX3BhdGgucHJvdG8aH1Byb3Rvcy9hY2NvdW50X3N0YXRlX2Jsb2Iu",
            "cHJvdG8aE1Byb3Rvcy9ldmVudHMucHJvdG8aGFByb3Rvcy9sZWRnZXJfaW5m",
            "by5wcm90bxoYUHJvdG9zL3RyYW5zYWN0aW9uLnByb3RvGh1Qcm90b3MvdmFs",
            "aWRhdG9yX2NoYW5nZS5wcm90byJoChtVcGRhdGVUb0xhdGVzdExlZGdlclJl",
            "cXVlc3QSHAoUY2xpZW50X2tub3duX3ZlcnNpb24YASABKAQSKwoPcmVxdWVz",
            "dGVkX2l0ZW1zGAIgAygLMhIudHlwZXMuUmVxdWVzdEl0ZW0i9wIKC1JlcXVl",
            "c3RJdGVtEkIKGWdldF9hY2NvdW50X3N0YXRlX3JlcXVlc3QYASABKAsyHS50",
            "eXBlcy5HZXRBY2NvdW50U3RhdGVSZXF1ZXN0SAAScQoyZ2V0X2FjY291bnRf",
            "dHJhbnNhY3Rpb25fYnlfc2VxdWVuY2VfbnVtYmVyX3JlcXVlc3QYAiABKAsy",
            "My50eXBlcy5HZXRBY2NvdW50VHJhbnNhY3Rpb25CeVNlcXVlbmNlTnVtYmVy",
            "UmVxdWVzdEgAElsKJ2dldF9ldmVudHNfYnlfZXZlbnRfYWNjZXNzX3BhdGhf",
            "cmVxdWVzdBgDIAEoCzIoLnR5cGVzLkdldEV2ZW50c0J5RXZlbnRBY2Nlc3NQ",
            "YXRoUmVxdWVzdEgAEkEKGGdldF90cmFuc2FjdGlvbnNfcmVxdWVzdBgEIAEo",
            "CzIdLnR5cGVzLkdldFRyYW5zYWN0aW9uc1JlcXVlc3RIAEIRCg9yZXF1ZXN0",
            "ZWRfaXRlbXMi0gEKHFVwZGF0ZVRvTGF0ZXN0TGVkZ2VyUmVzcG9uc2USKwoO",
            "cmVzcG9uc2VfaXRlbXMYASADKAsyEy50eXBlcy5SZXNwb25zZUl0ZW0SPgoV",
            "bGVkZ2VyX2luZm9fd2l0aF9zaWdzGAIgASgLMh8udHlwZXMuTGVkZ2VySW5m",
            "b1dpdGhTaWduYXR1cmVzEkUKF3ZhbGlkYXRvcl9jaGFuZ2VfZXZlbnRzGAMg",
            "AygLMiQudHlwZXMuVmFsaWRhdG9yQ2hhbmdlRXZlbnRXaXRoUHJvb2Yi/wIK",
            "DFJlc3BvbnNlSXRlbRJEChpnZXRfYWNjb3VudF9zdGF0ZV9yZXNwb25zZRgD",
            "IAEoCzIeLnR5cGVzLkdldEFjY291bnRTdGF0ZVJlc3BvbnNlSAAScwozZ2V0",
            "X2FjY291bnRfdHJhbnNhY3Rpb25fYnlfc2VxdWVuY2VfbnVtYmVyX3Jlc3Bv",
            "bnNlGAQgASgLMjQudHlwZXMuR2V0QWNjb3VudFRyYW5zYWN0aW9uQnlTZXF1",
            "ZW5jZU51bWJlclJlc3BvbnNlSAASXQooZ2V0X2V2ZW50c19ieV9ldmVudF9h",
            "Y2Nlc3NfcGF0aF9yZXNwb25zZRgFIAEoCzIpLnR5cGVzLkdldEV2ZW50c0J5",
            "RXZlbnRBY2Nlc3NQYXRoUmVzcG9uc2VIABJDChlnZXRfdHJhbnNhY3Rpb25z",
            "X3Jlc3BvbnNlGAYgASgLMh4udHlwZXMuR2V0VHJhbnNhY3Rpb25zUmVzcG9u",
            "c2VIAEIQCg5yZXNwb25zZV9pdGVtcyIpChZHZXRBY2NvdW50U3RhdGVSZXF1",
            "ZXN0Eg8KB2FkZHJlc3MYASABKAwiWQoXR2V0QWNjb3VudFN0YXRlUmVzcG9u",
            "c2USPgoYYWNjb3VudF9zdGF0ZV93aXRoX3Byb29mGAEgASgLMhwudHlwZXMu",
            "QWNjb3VudFN0YXRlV2l0aFByb29mIm4KLEdldEFjY291bnRUcmFuc2FjdGlv",
            "bkJ5U2VxdWVuY2VOdW1iZXJSZXF1ZXN0Eg8KB2FjY291bnQYASABKAwSFwoP",
            "c2VxdWVuY2VfbnVtYmVyGAIgASgEEhQKDGZldGNoX2V2ZW50cxgDIAEoCCLB",
            "AQotR2V0QWNjb3VudFRyYW5zYWN0aW9uQnlTZXF1ZW5jZU51bWJlclJlc3Bv",
            "bnNlEkgKHXNpZ25lZF90cmFuc2FjdGlvbl93aXRoX3Byb29mGAIgASgLMiEu",
            "dHlwZXMuU2lnbmVkVHJhbnNhY3Rpb25XaXRoUHJvb2YSRgogcHJvb2Zfb2Zf",
            "Y3VycmVudF9zZXF1ZW5jZV9udW1iZXIYAyABKAsyHC50eXBlcy5BY2NvdW50",
            "U3RhdGVXaXRoUHJvb2YiigEKIUdldEV2ZW50c0J5RXZlbnRBY2Nlc3NQYXRo",
            "UmVxdWVzdBImCgthY2Nlc3NfcGF0aBgBIAEoCzIRLnR5cGVzLkFjY2Vzc1Bh",
            "dGgSGwoTc3RhcnRfZXZlbnRfc2VxX251bRgCIAEoBBIRCglhc2NlbmRpbmcY",
            "AyABKAgSDQoFbGltaXQYBCABKAQikwEKIkdldEV2ZW50c0J5RXZlbnRBY2Nl",
            "c3NQYXRoUmVzcG9uc2USMAoRZXZlbnRzX3dpdGhfcHJvb2YYASADKAsyFS50",
            "eXBlcy5FdmVudFdpdGhQcm9vZhI7ChVwcm9vZl9vZl9sYXRlc3RfZXZlbnQY",
            "AiABKAsyHC50eXBlcy5BY2NvdW50U3RhdGVXaXRoUHJvb2YiVAoWR2V0VHJh",
            "bnNhY3Rpb25zUmVxdWVzdBIVCg1zdGFydF92ZXJzaW9uGAEgASgEEg0KBWxp",
            "bWl0GAIgASgEEhQKDGZldGNoX2V2ZW50cxgDIAEoCCJXChdHZXRUcmFuc2Fj",
            "dGlvbnNSZXNwb25zZRI8ChN0eG5fbGlzdF93aXRoX3Byb29mGAEgASgLMh8u",
            "dHlwZXMuVHJhbnNhY3Rpb25MaXN0V2l0aFByb29mYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Types.AccessPathReflection.Descriptor, global::Types.AccountStateBlobReflection.Descriptor, global::Types.EventsReflection.Descriptor, global::Types.LedgerInfoReflection.Descriptor, global::Types.TransactionReflection.Descriptor, global::Types.ValidatorChangeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.UpdateToLatestLedgerRequest), global::Types.UpdateToLatestLedgerRequest.Parser, new[]{ "ClientKnownVersion", "RequestedItems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.RequestItem), global::Types.RequestItem.Parser, new[]{ "GetAccountStateRequest", "GetAccountTransactionBySequenceNumberRequest", "GetEventsByEventAccessPathRequest", "GetTransactionsRequest" }, new[]{ "RequestedItems" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.UpdateToLatestLedgerResponse), global::Types.UpdateToLatestLedgerResponse.Parser, new[]{ "ResponseItems", "LedgerInfoWithSigs", "ValidatorChangeEvents" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.ResponseItem), global::Types.ResponseItem.Parser, new[]{ "GetAccountStateResponse", "GetAccountTransactionBySequenceNumberResponse", "GetEventsByEventAccessPathResponse", "GetTransactionsResponse" }, new[]{ "ResponseItems" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.GetAccountStateRequest), global::Types.GetAccountStateRequest.Parser, new[]{ "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.GetAccountStateResponse), global::Types.GetAccountStateResponse.Parser, new[]{ "AccountStateWithProof" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.GetAccountTransactionBySequenceNumberRequest), global::Types.GetAccountTransactionBySequenceNumberRequest.Parser, new[]{ "Account", "SequenceNumber", "FetchEvents" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.GetAccountTransactionBySequenceNumberResponse), global::Types.GetAccountTransactionBySequenceNumberResponse.Parser, new[]{ "SignedTransactionWithProof", "ProofOfCurrentSequenceNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.GetEventsByEventAccessPathRequest), global::Types.GetEventsByEventAccessPathRequest.Parser, new[]{ "AccessPath", "StartEventSeqNum", "Ascending", "Limit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.GetEventsByEventAccessPathResponse), global::Types.GetEventsByEventAccessPathResponse.Parser, new[]{ "EventsWithProof", "ProofOfLatestEvent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.GetTransactionsRequest), global::Types.GetTransactionsRequest.Parser, new[]{ "StartVersion", "Limit", "FetchEvents" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.GetTransactionsResponse), global::Types.GetTransactionsResponse.Parser, new[]{ "TxnListWithProof" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// This API is used to update the client to the latest ledger version and
  /// optionally also request 1..n other pieces of data.  This allows for batch
  /// queries.  All queries return proofs that a client should check to validate
  /// the data.
  ///
  /// Note that if a client only wishes to update to the latest LedgerInfo and
  /// receive the proof that this latest ledger extends the client_known_version
  /// ledger the client had, they can simply set the requested_items to an empty
  /// list.
  /// </summary>
  public sealed partial class UpdateToLatestLedgerRequest : pb::IMessage<UpdateToLatestLedgerRequest> {
    private static readonly pb::MessageParser<UpdateToLatestLedgerRequest> _parser = new pb::MessageParser<UpdateToLatestLedgerRequest>(() => new UpdateToLatestLedgerRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateToLatestLedgerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.GetWithProofReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateToLatestLedgerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateToLatestLedgerRequest(UpdateToLatestLedgerRequest other) : this() {
      clientKnownVersion_ = other.clientKnownVersion_;
      requestedItems_ = other.requestedItems_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateToLatestLedgerRequest Clone() {
      return new UpdateToLatestLedgerRequest(this);
    }

    /// <summary>Field number for the "client_known_version" field.</summary>
    public const int ClientKnownVersionFieldNumber = 1;
    private ulong clientKnownVersion_;
    /// <summary>
    /// This is the version the client already trusts. Usually the client should
    /// set this to the version it obtained the last time it synced with the
    /// chain. If this is the first time ever the client sends a request, it must
    /// use the waypoint hard-coded in its software.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClientKnownVersion {
      get { return clientKnownVersion_; }
      set {
        clientKnownVersion_ = value;
      }
    }

    /// <summary>Field number for the "requested_items" field.</summary>
    public const int RequestedItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Types.RequestItem> _repeated_requestedItems_codec
        = pb::FieldCodec.ForMessage(18, global::Types.RequestItem.Parser);
    private readonly pbc::RepeatedField<global::Types.RequestItem> requestedItems_ = new pbc::RepeatedField<global::Types.RequestItem>();
    /// <summary>
    /// The items for which we are requesting data in this API call.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Types.RequestItem> RequestedItems {
      get { return requestedItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateToLatestLedgerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateToLatestLedgerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientKnownVersion != other.ClientKnownVersion) return false;
      if(!requestedItems_.Equals(other.requestedItems_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientKnownVersion != 0UL) hash ^= ClientKnownVersion.GetHashCode();
      hash ^= requestedItems_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientKnownVersion != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ClientKnownVersion);
      }
      requestedItems_.WriteTo(output, _repeated_requestedItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientKnownVersion != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClientKnownVersion);
      }
      size += requestedItems_.CalculateSize(_repeated_requestedItems_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateToLatestLedgerRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientKnownVersion != 0UL) {
        ClientKnownVersion = other.ClientKnownVersion;
      }
      requestedItems_.Add(other.requestedItems_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClientKnownVersion = input.ReadUInt64();
            break;
          }
          case 18: {
            requestedItems_.AddEntriesFrom(input, _repeated_requestedItems_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RequestItem : pb::IMessage<RequestItem> {
    private static readonly pb::MessageParser<RequestItem> _parser = new pb::MessageParser<RequestItem>(() => new RequestItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.GetWithProofReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestItem(RequestItem other) : this() {
      switch (other.RequestedItemsCase) {
        case RequestedItemsOneofCase.GetAccountStateRequest:
          GetAccountStateRequest = other.GetAccountStateRequest.Clone();
          break;
        case RequestedItemsOneofCase.GetAccountTransactionBySequenceNumberRequest:
          GetAccountTransactionBySequenceNumberRequest = other.GetAccountTransactionBySequenceNumberRequest.Clone();
          break;
        case RequestedItemsOneofCase.GetEventsByEventAccessPathRequest:
          GetEventsByEventAccessPathRequest = other.GetEventsByEventAccessPathRequest.Clone();
          break;
        case RequestedItemsOneofCase.GetTransactionsRequest:
          GetTransactionsRequest = other.GetTransactionsRequest.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestItem Clone() {
      return new RequestItem(this);
    }

    /// <summary>Field number for the "get_account_state_request" field.</summary>
    public const int GetAccountStateRequestFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.GetAccountStateRequest GetAccountStateRequest {
      get { return requestedItemsCase_ == RequestedItemsOneofCase.GetAccountStateRequest ? (global::Types.GetAccountStateRequest) requestedItems_ : null; }
      set {
        requestedItems_ = value;
        requestedItemsCase_ = value == null ? RequestedItemsOneofCase.None : RequestedItemsOneofCase.GetAccountStateRequest;
      }
    }

    /// <summary>Field number for the "get_account_transaction_by_sequence_number_request" field.</summary>
    public const int GetAccountTransactionBySequenceNumberRequestFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.GetAccountTransactionBySequenceNumberRequest GetAccountTransactionBySequenceNumberRequest {
      get { return requestedItemsCase_ == RequestedItemsOneofCase.GetAccountTransactionBySequenceNumberRequest ? (global::Types.GetAccountTransactionBySequenceNumberRequest) requestedItems_ : null; }
      set {
        requestedItems_ = value;
        requestedItemsCase_ = value == null ? RequestedItemsOneofCase.None : RequestedItemsOneofCase.GetAccountTransactionBySequenceNumberRequest;
      }
    }

    /// <summary>Field number for the "get_events_by_event_access_path_request" field.</summary>
    public const int GetEventsByEventAccessPathRequestFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.GetEventsByEventAccessPathRequest GetEventsByEventAccessPathRequest {
      get { return requestedItemsCase_ == RequestedItemsOneofCase.GetEventsByEventAccessPathRequest ? (global::Types.GetEventsByEventAccessPathRequest) requestedItems_ : null; }
      set {
        requestedItems_ = value;
        requestedItemsCase_ = value == null ? RequestedItemsOneofCase.None : RequestedItemsOneofCase.GetEventsByEventAccessPathRequest;
      }
    }

    /// <summary>Field number for the "get_transactions_request" field.</summary>
    public const int GetTransactionsRequestFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.GetTransactionsRequest GetTransactionsRequest {
      get { return requestedItemsCase_ == RequestedItemsOneofCase.GetTransactionsRequest ? (global::Types.GetTransactionsRequest) requestedItems_ : null; }
      set {
        requestedItems_ = value;
        requestedItemsCase_ = value == null ? RequestedItemsOneofCase.None : RequestedItemsOneofCase.GetTransactionsRequest;
      }
    }

    private object requestedItems_;
    /// <summary>Enum of possible cases for the "requested_items" oneof.</summary>
    public enum RequestedItemsOneofCase {
      None = 0,
      GetAccountStateRequest = 1,
      GetAccountTransactionBySequenceNumberRequest = 2,
      GetEventsByEventAccessPathRequest = 3,
      GetTransactionsRequest = 4,
    }
    private RequestedItemsOneofCase requestedItemsCase_ = RequestedItemsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestedItemsOneofCase RequestedItemsCase {
      get { return requestedItemsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestedItems() {
      requestedItemsCase_ = RequestedItemsOneofCase.None;
      requestedItems_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GetAccountStateRequest, other.GetAccountStateRequest)) return false;
      if (!object.Equals(GetAccountTransactionBySequenceNumberRequest, other.GetAccountTransactionBySequenceNumberRequest)) return false;
      if (!object.Equals(GetEventsByEventAccessPathRequest, other.GetEventsByEventAccessPathRequest)) return false;
      if (!object.Equals(GetTransactionsRequest, other.GetTransactionsRequest)) return false;
      if (RequestedItemsCase != other.RequestedItemsCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestedItemsCase_ == RequestedItemsOneofCase.GetAccountStateRequest) hash ^= GetAccountStateRequest.GetHashCode();
      if (requestedItemsCase_ == RequestedItemsOneofCase.GetAccountTransactionBySequenceNumberRequest) hash ^= GetAccountTransactionBySequenceNumberRequest.GetHashCode();
      if (requestedItemsCase_ == RequestedItemsOneofCase.GetEventsByEventAccessPathRequest) hash ^= GetEventsByEventAccessPathRequest.GetHashCode();
      if (requestedItemsCase_ == RequestedItemsOneofCase.GetTransactionsRequest) hash ^= GetTransactionsRequest.GetHashCode();
      hash ^= (int) requestedItemsCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestedItemsCase_ == RequestedItemsOneofCase.GetAccountStateRequest) {
        output.WriteRawTag(10);
        output.WriteMessage(GetAccountStateRequest);
      }
      if (requestedItemsCase_ == RequestedItemsOneofCase.GetAccountTransactionBySequenceNumberRequest) {
        output.WriteRawTag(18);
        output.WriteMessage(GetAccountTransactionBySequenceNumberRequest);
      }
      if (requestedItemsCase_ == RequestedItemsOneofCase.GetEventsByEventAccessPathRequest) {
        output.WriteRawTag(26);
        output.WriteMessage(GetEventsByEventAccessPathRequest);
      }
      if (requestedItemsCase_ == RequestedItemsOneofCase.GetTransactionsRequest) {
        output.WriteRawTag(34);
        output.WriteMessage(GetTransactionsRequest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestedItemsCase_ == RequestedItemsOneofCase.GetAccountStateRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetAccountStateRequest);
      }
      if (requestedItemsCase_ == RequestedItemsOneofCase.GetAccountTransactionBySequenceNumberRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetAccountTransactionBySequenceNumberRequest);
      }
      if (requestedItemsCase_ == RequestedItemsOneofCase.GetEventsByEventAccessPathRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetEventsByEventAccessPathRequest);
      }
      if (requestedItemsCase_ == RequestedItemsOneofCase.GetTransactionsRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetTransactionsRequest);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestItem other) {
      if (other == null) {
        return;
      }
      switch (other.RequestedItemsCase) {
        case RequestedItemsOneofCase.GetAccountStateRequest:
          if (GetAccountStateRequest == null) {
            GetAccountStateRequest = new global::Types.GetAccountStateRequest();
          }
          GetAccountStateRequest.MergeFrom(other.GetAccountStateRequest);
          break;
        case RequestedItemsOneofCase.GetAccountTransactionBySequenceNumberRequest:
          if (GetAccountTransactionBySequenceNumberRequest == null) {
            GetAccountTransactionBySequenceNumberRequest = new global::Types.GetAccountTransactionBySequenceNumberRequest();
          }
          GetAccountTransactionBySequenceNumberRequest.MergeFrom(other.GetAccountTransactionBySequenceNumberRequest);
          break;
        case RequestedItemsOneofCase.GetEventsByEventAccessPathRequest:
          if (GetEventsByEventAccessPathRequest == null) {
            GetEventsByEventAccessPathRequest = new global::Types.GetEventsByEventAccessPathRequest();
          }
          GetEventsByEventAccessPathRequest.MergeFrom(other.GetEventsByEventAccessPathRequest);
          break;
        case RequestedItemsOneofCase.GetTransactionsRequest:
          if (GetTransactionsRequest == null) {
            GetTransactionsRequest = new global::Types.GetTransactionsRequest();
          }
          GetTransactionsRequest.MergeFrom(other.GetTransactionsRequest);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Types.GetAccountStateRequest subBuilder = new global::Types.GetAccountStateRequest();
            if (requestedItemsCase_ == RequestedItemsOneofCase.GetAccountStateRequest) {
              subBuilder.MergeFrom(GetAccountStateRequest);
            }
            input.ReadMessage(subBuilder);
            GetAccountStateRequest = subBuilder;
            break;
          }
          case 18: {
            global::Types.GetAccountTransactionBySequenceNumberRequest subBuilder = new global::Types.GetAccountTransactionBySequenceNumberRequest();
            if (requestedItemsCase_ == RequestedItemsOneofCase.GetAccountTransactionBySequenceNumberRequest) {
              subBuilder.MergeFrom(GetAccountTransactionBySequenceNumberRequest);
            }
            input.ReadMessage(subBuilder);
            GetAccountTransactionBySequenceNumberRequest = subBuilder;
            break;
          }
          case 26: {
            global::Types.GetEventsByEventAccessPathRequest subBuilder = new global::Types.GetEventsByEventAccessPathRequest();
            if (requestedItemsCase_ == RequestedItemsOneofCase.GetEventsByEventAccessPathRequest) {
              subBuilder.MergeFrom(GetEventsByEventAccessPathRequest);
            }
            input.ReadMessage(subBuilder);
            GetEventsByEventAccessPathRequest = subBuilder;
            break;
          }
          case 34: {
            global::Types.GetTransactionsRequest subBuilder = new global::Types.GetTransactionsRequest();
            if (requestedItemsCase_ == RequestedItemsOneofCase.GetTransactionsRequest) {
              subBuilder.MergeFrom(GetTransactionsRequest);
            }
            input.ReadMessage(subBuilder);
            GetTransactionsRequest = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response from getting latest ledger
  /// </summary>
  public sealed partial class UpdateToLatestLedgerResponse : pb::IMessage<UpdateToLatestLedgerResponse> {
    private static readonly pb::MessageParser<UpdateToLatestLedgerResponse> _parser = new pb::MessageParser<UpdateToLatestLedgerResponse>(() => new UpdateToLatestLedgerResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateToLatestLedgerResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.GetWithProofReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateToLatestLedgerResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateToLatestLedgerResponse(UpdateToLatestLedgerResponse other) : this() {
      responseItems_ = other.responseItems_.Clone();
      ledgerInfoWithSigs_ = other.ledgerInfoWithSigs_ != null ? other.ledgerInfoWithSigs_.Clone() : null;
      validatorChangeEvents_ = other.validatorChangeEvents_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateToLatestLedgerResponse Clone() {
      return new UpdateToLatestLedgerResponse(this);
    }

    /// <summary>Field number for the "response_items" field.</summary>
    public const int ResponseItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Types.ResponseItem> _repeated_responseItems_codec
        = pb::FieldCodec.ForMessage(10, global::Types.ResponseItem.Parser);
    private readonly pbc::RepeatedField<global::Types.ResponseItem> responseItems_ = new pbc::RepeatedField<global::Types.ResponseItem>();
    /// <summary>
    /// Responses to the queries posed by the requests. The proofs generated will
    /// be relative to the version of the latest ledger provided below.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Types.ResponseItem> ResponseItems {
      get { return responseItems_; }
    }

    /// <summary>Field number for the "ledger_info_with_sigs" field.</summary>
    public const int LedgerInfoWithSigsFieldNumber = 2;
    private global::Types.LedgerInfoWithSignatures ledgerInfoWithSigs_;
    /// <summary>
    /// The latest ledger info this node has. It will come with at least 2f+1
    /// validator signatures as well as a proof that shows the latest ledger
    /// extends the old ledger the client had.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.LedgerInfoWithSignatures LedgerInfoWithSigs {
      get { return ledgerInfoWithSigs_; }
      set {
        ledgerInfoWithSigs_ = value;
      }
    }

    /// <summary>Field number for the "validator_change_events" field.</summary>
    public const int ValidatorChangeEventsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Types.ValidatorChangeEventWithProof> _repeated_validatorChangeEvents_codec
        = pb::FieldCodec.ForMessage(26, global::Types.ValidatorChangeEventWithProof.Parser);
    private readonly pbc::RepeatedField<global::Types.ValidatorChangeEventWithProof> validatorChangeEvents_ = new pbc::RepeatedField<global::Types.ValidatorChangeEventWithProof>();
    /// <summary>
    /// Validator change events from what the client last knew.  This is used to
    /// inform the client of validator changes from the client's last known version
    /// until the current version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Types.ValidatorChangeEventWithProof> ValidatorChangeEvents {
      get { return validatorChangeEvents_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateToLatestLedgerResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateToLatestLedgerResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!responseItems_.Equals(other.responseItems_)) return false;
      if (!object.Equals(LedgerInfoWithSigs, other.LedgerInfoWithSigs)) return false;
      if(!validatorChangeEvents_.Equals(other.validatorChangeEvents_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= responseItems_.GetHashCode();
      if (ledgerInfoWithSigs_ != null) hash ^= LedgerInfoWithSigs.GetHashCode();
      hash ^= validatorChangeEvents_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      responseItems_.WriteTo(output, _repeated_responseItems_codec);
      if (ledgerInfoWithSigs_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LedgerInfoWithSigs);
      }
      validatorChangeEvents_.WriteTo(output, _repeated_validatorChangeEvents_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += responseItems_.CalculateSize(_repeated_responseItems_codec);
      if (ledgerInfoWithSigs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LedgerInfoWithSigs);
      }
      size += validatorChangeEvents_.CalculateSize(_repeated_validatorChangeEvents_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateToLatestLedgerResponse other) {
      if (other == null) {
        return;
      }
      responseItems_.Add(other.responseItems_);
      if (other.ledgerInfoWithSigs_ != null) {
        if (ledgerInfoWithSigs_ == null) {
          LedgerInfoWithSigs = new global::Types.LedgerInfoWithSignatures();
        }
        LedgerInfoWithSigs.MergeFrom(other.LedgerInfoWithSigs);
      }
      validatorChangeEvents_.Add(other.validatorChangeEvents_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            responseItems_.AddEntriesFrom(input, _repeated_responseItems_codec);
            break;
          }
          case 18: {
            if (ledgerInfoWithSigs_ == null) {
              LedgerInfoWithSigs = new global::Types.LedgerInfoWithSignatures();
            }
            input.ReadMessage(LedgerInfoWithSigs);
            break;
          }
          case 26: {
            validatorChangeEvents_.AddEntriesFrom(input, _repeated_validatorChangeEvents_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Individual response items to the queries posed by the requests
  /// </summary>
  public sealed partial class ResponseItem : pb::IMessage<ResponseItem> {
    private static readonly pb::MessageParser<ResponseItem> _parser = new pb::MessageParser<ResponseItem>(() => new ResponseItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.GetWithProofReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseItem(ResponseItem other) : this() {
      switch (other.ResponseItemsCase) {
        case ResponseItemsOneofCase.GetAccountStateResponse:
          GetAccountStateResponse = other.GetAccountStateResponse.Clone();
          break;
        case ResponseItemsOneofCase.GetAccountTransactionBySequenceNumberResponse:
          GetAccountTransactionBySequenceNumberResponse = other.GetAccountTransactionBySequenceNumberResponse.Clone();
          break;
        case ResponseItemsOneofCase.GetEventsByEventAccessPathResponse:
          GetEventsByEventAccessPathResponse = other.GetEventsByEventAccessPathResponse.Clone();
          break;
        case ResponseItemsOneofCase.GetTransactionsResponse:
          GetTransactionsResponse = other.GetTransactionsResponse.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseItem Clone() {
      return new ResponseItem(this);
    }

    /// <summary>Field number for the "get_account_state_response" field.</summary>
    public const int GetAccountStateResponseFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.GetAccountStateResponse GetAccountStateResponse {
      get { return responseItemsCase_ == ResponseItemsOneofCase.GetAccountStateResponse ? (global::Types.GetAccountStateResponse) responseItems_ : null; }
      set {
        responseItems_ = value;
        responseItemsCase_ = value == null ? ResponseItemsOneofCase.None : ResponseItemsOneofCase.GetAccountStateResponse;
      }
    }

    /// <summary>Field number for the "get_account_transaction_by_sequence_number_response" field.</summary>
    public const int GetAccountTransactionBySequenceNumberResponseFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.GetAccountTransactionBySequenceNumberResponse GetAccountTransactionBySequenceNumberResponse {
      get { return responseItemsCase_ == ResponseItemsOneofCase.GetAccountTransactionBySequenceNumberResponse ? (global::Types.GetAccountTransactionBySequenceNumberResponse) responseItems_ : null; }
      set {
        responseItems_ = value;
        responseItemsCase_ = value == null ? ResponseItemsOneofCase.None : ResponseItemsOneofCase.GetAccountTransactionBySequenceNumberResponse;
      }
    }

    /// <summary>Field number for the "get_events_by_event_access_path_response" field.</summary>
    public const int GetEventsByEventAccessPathResponseFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.GetEventsByEventAccessPathResponse GetEventsByEventAccessPathResponse {
      get { return responseItemsCase_ == ResponseItemsOneofCase.GetEventsByEventAccessPathResponse ? (global::Types.GetEventsByEventAccessPathResponse) responseItems_ : null; }
      set {
        responseItems_ = value;
        responseItemsCase_ = value == null ? ResponseItemsOneofCase.None : ResponseItemsOneofCase.GetEventsByEventAccessPathResponse;
      }
    }

    /// <summary>Field number for the "get_transactions_response" field.</summary>
    public const int GetTransactionsResponseFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.GetTransactionsResponse GetTransactionsResponse {
      get { return responseItemsCase_ == ResponseItemsOneofCase.GetTransactionsResponse ? (global::Types.GetTransactionsResponse) responseItems_ : null; }
      set {
        responseItems_ = value;
        responseItemsCase_ = value == null ? ResponseItemsOneofCase.None : ResponseItemsOneofCase.GetTransactionsResponse;
      }
    }

    private object responseItems_;
    /// <summary>Enum of possible cases for the "response_items" oneof.</summary>
    public enum ResponseItemsOneofCase {
      None = 0,
      GetAccountStateResponse = 3,
      GetAccountTransactionBySequenceNumberResponse = 4,
      GetEventsByEventAccessPathResponse = 5,
      GetTransactionsResponse = 6,
    }
    private ResponseItemsOneofCase responseItemsCase_ = ResponseItemsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseItemsOneofCase ResponseItemsCase {
      get { return responseItemsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponseItems() {
      responseItemsCase_ = ResponseItemsOneofCase.None;
      responseItems_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GetAccountStateResponse, other.GetAccountStateResponse)) return false;
      if (!object.Equals(GetAccountTransactionBySequenceNumberResponse, other.GetAccountTransactionBySequenceNumberResponse)) return false;
      if (!object.Equals(GetEventsByEventAccessPathResponse, other.GetEventsByEventAccessPathResponse)) return false;
      if (!object.Equals(GetTransactionsResponse, other.GetTransactionsResponse)) return false;
      if (ResponseItemsCase != other.ResponseItemsCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (responseItemsCase_ == ResponseItemsOneofCase.GetAccountStateResponse) hash ^= GetAccountStateResponse.GetHashCode();
      if (responseItemsCase_ == ResponseItemsOneofCase.GetAccountTransactionBySequenceNumberResponse) hash ^= GetAccountTransactionBySequenceNumberResponse.GetHashCode();
      if (responseItemsCase_ == ResponseItemsOneofCase.GetEventsByEventAccessPathResponse) hash ^= GetEventsByEventAccessPathResponse.GetHashCode();
      if (responseItemsCase_ == ResponseItemsOneofCase.GetTransactionsResponse) hash ^= GetTransactionsResponse.GetHashCode();
      hash ^= (int) responseItemsCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (responseItemsCase_ == ResponseItemsOneofCase.GetAccountStateResponse) {
        output.WriteRawTag(26);
        output.WriteMessage(GetAccountStateResponse);
      }
      if (responseItemsCase_ == ResponseItemsOneofCase.GetAccountTransactionBySequenceNumberResponse) {
        output.WriteRawTag(34);
        output.WriteMessage(GetAccountTransactionBySequenceNumberResponse);
      }
      if (responseItemsCase_ == ResponseItemsOneofCase.GetEventsByEventAccessPathResponse) {
        output.WriteRawTag(42);
        output.WriteMessage(GetEventsByEventAccessPathResponse);
      }
      if (responseItemsCase_ == ResponseItemsOneofCase.GetTransactionsResponse) {
        output.WriteRawTag(50);
        output.WriteMessage(GetTransactionsResponse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (responseItemsCase_ == ResponseItemsOneofCase.GetAccountStateResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetAccountStateResponse);
      }
      if (responseItemsCase_ == ResponseItemsOneofCase.GetAccountTransactionBySequenceNumberResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetAccountTransactionBySequenceNumberResponse);
      }
      if (responseItemsCase_ == ResponseItemsOneofCase.GetEventsByEventAccessPathResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetEventsByEventAccessPathResponse);
      }
      if (responseItemsCase_ == ResponseItemsOneofCase.GetTransactionsResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetTransactionsResponse);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseItem other) {
      if (other == null) {
        return;
      }
      switch (other.ResponseItemsCase) {
        case ResponseItemsOneofCase.GetAccountStateResponse:
          if (GetAccountStateResponse == null) {
            GetAccountStateResponse = new global::Types.GetAccountStateResponse();
          }
          GetAccountStateResponse.MergeFrom(other.GetAccountStateResponse);
          break;
        case ResponseItemsOneofCase.GetAccountTransactionBySequenceNumberResponse:
          if (GetAccountTransactionBySequenceNumberResponse == null) {
            GetAccountTransactionBySequenceNumberResponse = new global::Types.GetAccountTransactionBySequenceNumberResponse();
          }
          GetAccountTransactionBySequenceNumberResponse.MergeFrom(other.GetAccountTransactionBySequenceNumberResponse);
          break;
        case ResponseItemsOneofCase.GetEventsByEventAccessPathResponse:
          if (GetEventsByEventAccessPathResponse == null) {
            GetEventsByEventAccessPathResponse = new global::Types.GetEventsByEventAccessPathResponse();
          }
          GetEventsByEventAccessPathResponse.MergeFrom(other.GetEventsByEventAccessPathResponse);
          break;
        case ResponseItemsOneofCase.GetTransactionsResponse:
          if (GetTransactionsResponse == null) {
            GetTransactionsResponse = new global::Types.GetTransactionsResponse();
          }
          GetTransactionsResponse.MergeFrom(other.GetTransactionsResponse);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            global::Types.GetAccountStateResponse subBuilder = new global::Types.GetAccountStateResponse();
            if (responseItemsCase_ == ResponseItemsOneofCase.GetAccountStateResponse) {
              subBuilder.MergeFrom(GetAccountStateResponse);
            }
            input.ReadMessage(subBuilder);
            GetAccountStateResponse = subBuilder;
            break;
          }
          case 34: {
            global::Types.GetAccountTransactionBySequenceNumberResponse subBuilder = new global::Types.GetAccountTransactionBySequenceNumberResponse();
            if (responseItemsCase_ == ResponseItemsOneofCase.GetAccountTransactionBySequenceNumberResponse) {
              subBuilder.MergeFrom(GetAccountTransactionBySequenceNumberResponse);
            }
            input.ReadMessage(subBuilder);
            GetAccountTransactionBySequenceNumberResponse = subBuilder;
            break;
          }
          case 42: {
            global::Types.GetEventsByEventAccessPathResponse subBuilder = new global::Types.GetEventsByEventAccessPathResponse();
            if (responseItemsCase_ == ResponseItemsOneofCase.GetEventsByEventAccessPathResponse) {
              subBuilder.MergeFrom(GetEventsByEventAccessPathResponse);
            }
            input.ReadMessage(subBuilder);
            GetEventsByEventAccessPathResponse = subBuilder;
            break;
          }
          case 50: {
            global::Types.GetTransactionsResponse subBuilder = new global::Types.GetTransactionsResponse();
            if (responseItemsCase_ == ResponseItemsOneofCase.GetTransactionsResponse) {
              subBuilder.MergeFrom(GetTransactionsResponse);
            }
            input.ReadMessage(subBuilder);
            GetTransactionsResponse = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Gets latest state for an account.
  /// </summary>
  public sealed partial class GetAccountStateRequest : pb::IMessage<GetAccountStateRequest> {
    private static readonly pb::MessageParser<GetAccountStateRequest> _parser = new pb::MessageParser<GetAccountStateRequest>(() => new GetAccountStateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAccountStateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.GetWithProofReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountStateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountStateRequest(GetAccountStateRequest other) : this() {
      address_ = other.address_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountStateRequest Clone() {
      return new GetAccountStateRequest(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private pb::ByteString address_ = pb::ByteString.Empty;
    /// <summary>
    /// Account for which we are fetching the state.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAccountStateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAccountStateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAccountStateRequest other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// State information returned by a get account state query.
  /// </summary>
  public sealed partial class GetAccountStateResponse : pb::IMessage<GetAccountStateResponse> {
    private static readonly pb::MessageParser<GetAccountStateResponse> _parser = new pb::MessageParser<GetAccountStateResponse>(() => new GetAccountStateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAccountStateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.GetWithProofReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountStateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountStateResponse(GetAccountStateResponse other) : this() {
      accountStateWithProof_ = other.accountStateWithProof_ != null ? other.accountStateWithProof_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountStateResponse Clone() {
      return new GetAccountStateResponse(this);
    }

    /// <summary>Field number for the "account_state_with_proof" field.</summary>
    public const int AccountStateWithProofFieldNumber = 1;
    private global::Types.AccountStateWithProof accountStateWithProof_;
    /// <summary>
    /// Blob value representing the account state together with proof the client
    /// can utilize to verify it.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.AccountStateWithProof AccountStateWithProof {
      get { return accountStateWithProof_; }
      set {
        accountStateWithProof_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAccountStateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAccountStateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AccountStateWithProof, other.AccountStateWithProof)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (accountStateWithProof_ != null) hash ^= AccountStateWithProof.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (accountStateWithProof_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AccountStateWithProof);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (accountStateWithProof_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccountStateWithProof);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAccountStateResponse other) {
      if (other == null) {
        return;
      }
      if (other.accountStateWithProof_ != null) {
        if (accountStateWithProof_ == null) {
          AccountStateWithProof = new global::Types.AccountStateWithProof();
        }
        AccountStateWithProof.MergeFrom(other.AccountStateWithProof);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (accountStateWithProof_ == null) {
              AccountStateWithProof = new global::Types.AccountStateWithProof();
            }
            input.ReadMessage(AccountStateWithProof);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// -----------------------------------------------------------------------------
  /// ---------------- Get single transaction by account + sequence number
  /// -----------------------------------------------------------------------------
  /// Get transactions that altered an account - this includes both sent and
  /// received. A user of this should check that the data returned matches what
  /// they expect.  As an example, a potential attack vector would be something
  /// like the following: Alice is buying an apple from Bob. Alice's phone signs a
  /// transaction X with sequence number N that pays coins to Bob. Alice transmits
  /// this signature to Bob's payment terminal which then submits the transaction
  /// and checks its status to see if Alice can be given the apple. However, as Bob
  /// is doing this Alice constructs a second transaction X' also with sequence
  /// number N. Alice gets that transaction inserted in the blockchain. If Bob
  /// isn't thoughtful about how he uses this API he may assume that if he asks for
  /// the N'th transaction on Alice's account that when the API returns that this
  /// means the transaction has gone through. The point here is that one should be
  /// careful in reading too much into "transaction X is on the chain" and focus on
  /// the logs, which tell you what the transaction did.
  ///
  /// If a client submitted a transaction, they should also verify that the hash of
  /// the returned transaction matches what they submitted.  As an example, if a
  /// client has two wallets that share the same account, they may both submit a
  /// transaction at the same sequence number and only one will be committed.  A
  /// client should never assume that if they receive the response that this
  /// transaction was included that it means that this is definitely the
  /// transaction that was submitted.  They should check that the hash matches what
  /// they sent
  /// </summary>
  public sealed partial class GetAccountTransactionBySequenceNumberRequest : pb::IMessage<GetAccountTransactionBySequenceNumberRequest> {
    private static readonly pb::MessageParser<GetAccountTransactionBySequenceNumberRequest> _parser = new pb::MessageParser<GetAccountTransactionBySequenceNumberRequest>(() => new GetAccountTransactionBySequenceNumberRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAccountTransactionBySequenceNumberRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.GetWithProofReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountTransactionBySequenceNumberRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountTransactionBySequenceNumberRequest(GetAccountTransactionBySequenceNumberRequest other) : this() {
      account_ = other.account_;
      sequenceNumber_ = other.sequenceNumber_;
      fetchEvents_ = other.fetchEvents_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountTransactionBySequenceNumberRequest Clone() {
      return new GetAccountTransactionBySequenceNumberRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private pb::ByteString account_ = pb::ByteString.Empty;
    /// <summary>
    /// Account for which to query transactions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sequence_number" field.</summary>
    public const int SequenceNumberFieldNumber = 2;
    private ulong sequenceNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SequenceNumber {
      get { return sequenceNumber_; }
      set {
        sequenceNumber_ = value;
      }
    }

    /// <summary>Field number for the "fetch_events" field.</summary>
    public const int FetchEventsFieldNumber = 3;
    private bool fetchEvents_;
    /// <summary>
    /// Set to true to fetch events for the transaction at this version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FetchEvents {
      get { return fetchEvents_; }
      set {
        fetchEvents_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAccountTransactionBySequenceNumberRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAccountTransactionBySequenceNumberRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (SequenceNumber != other.SequenceNumber) return false;
      if (FetchEvents != other.FetchEvents) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (SequenceNumber != 0UL) hash ^= SequenceNumber.GetHashCode();
      if (FetchEvents != false) hash ^= FetchEvents.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Account);
      }
      if (SequenceNumber != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SequenceNumber);
      }
      if (FetchEvents != false) {
        output.WriteRawTag(24);
        output.WriteBool(FetchEvents);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Account);
      }
      if (SequenceNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SequenceNumber);
      }
      if (FetchEvents != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAccountTransactionBySequenceNumberRequest other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.SequenceNumber != 0UL) {
        SequenceNumber = other.SequenceNumber;
      }
      if (other.FetchEvents != false) {
        FetchEvents = other.FetchEvents;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadBytes();
            break;
          }
          case 16: {
            SequenceNumber = input.ReadUInt64();
            break;
          }
          case 24: {
            FetchEvents = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Transaction information for transactions requested by
  /// GetAccountTransactionsRequest
  /// </summary>
  public sealed partial class GetAccountTransactionBySequenceNumberResponse : pb::IMessage<GetAccountTransactionBySequenceNumberResponse> {
    private static readonly pb::MessageParser<GetAccountTransactionBySequenceNumberResponse> _parser = new pb::MessageParser<GetAccountTransactionBySequenceNumberResponse>(() => new GetAccountTransactionBySequenceNumberResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAccountTransactionBySequenceNumberResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.GetWithProofReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountTransactionBySequenceNumberResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountTransactionBySequenceNumberResponse(GetAccountTransactionBySequenceNumberResponse other) : this() {
      signedTransactionWithProof_ = other.signedTransactionWithProof_ != null ? other.signedTransactionWithProof_.Clone() : null;
      proofOfCurrentSequenceNumber_ = other.proofOfCurrentSequenceNumber_ != null ? other.proofOfCurrentSequenceNumber_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountTransactionBySequenceNumberResponse Clone() {
      return new GetAccountTransactionBySequenceNumberResponse(this);
    }

    /// <summary>Field number for the "signed_transaction_with_proof" field.</summary>
    public const int SignedTransactionWithProofFieldNumber = 2;
    private global::Types.SignedTransactionWithProof signedTransactionWithProof_;
    /// <summary>
    /// When the transaction requested is committed, return the committed
    /// transaction with proof.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.SignedTransactionWithProof SignedTransactionWithProof {
      get { return signedTransactionWithProof_; }
      set {
        signedTransactionWithProof_ = value;
      }
    }

    /// <summary>Field number for the "proof_of_current_sequence_number" field.</summary>
    public const int ProofOfCurrentSequenceNumberFieldNumber = 3;
    private global::Types.AccountStateWithProof proofOfCurrentSequenceNumber_;
    /// <summary>
    /// When the transaction requested is not committed, we give a proof that
    /// shows the current sequence number is smaller than what would have been if
    /// the transaction was committed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.AccountStateWithProof ProofOfCurrentSequenceNumber {
      get { return proofOfCurrentSequenceNumber_; }
      set {
        proofOfCurrentSequenceNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAccountTransactionBySequenceNumberResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAccountTransactionBySequenceNumberResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SignedTransactionWithProof, other.SignedTransactionWithProof)) return false;
      if (!object.Equals(ProofOfCurrentSequenceNumber, other.ProofOfCurrentSequenceNumber)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (signedTransactionWithProof_ != null) hash ^= SignedTransactionWithProof.GetHashCode();
      if (proofOfCurrentSequenceNumber_ != null) hash ^= ProofOfCurrentSequenceNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (signedTransactionWithProof_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SignedTransactionWithProof);
      }
      if (proofOfCurrentSequenceNumber_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ProofOfCurrentSequenceNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (signedTransactionWithProof_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignedTransactionWithProof);
      }
      if (proofOfCurrentSequenceNumber_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProofOfCurrentSequenceNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAccountTransactionBySequenceNumberResponse other) {
      if (other == null) {
        return;
      }
      if (other.signedTransactionWithProof_ != null) {
        if (signedTransactionWithProof_ == null) {
          SignedTransactionWithProof = new global::Types.SignedTransactionWithProof();
        }
        SignedTransactionWithProof.MergeFrom(other.SignedTransactionWithProof);
      }
      if (other.proofOfCurrentSequenceNumber_ != null) {
        if (proofOfCurrentSequenceNumber_ == null) {
          ProofOfCurrentSequenceNumber = new global::Types.AccountStateWithProof();
        }
        ProofOfCurrentSequenceNumber.MergeFrom(other.ProofOfCurrentSequenceNumber);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (signedTransactionWithProof_ == null) {
              SignedTransactionWithProof = new global::Types.SignedTransactionWithProof();
            }
            input.ReadMessage(SignedTransactionWithProof);
            break;
          }
          case 26: {
            if (proofOfCurrentSequenceNumber_ == null) {
              ProofOfCurrentSequenceNumber = new global::Types.AccountStateWithProof();
            }
            input.ReadMessage(ProofOfCurrentSequenceNumber);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Get events that exist on an event access path.  In the current world,
  /// a user may specify events that were received, events that were sent, or any
  /// event that modifies their account
  /// </summary>
  public sealed partial class GetEventsByEventAccessPathRequest : pb::IMessage<GetEventsByEventAccessPathRequest> {
    private static readonly pb::MessageParser<GetEventsByEventAccessPathRequest> _parser = new pb::MessageParser<GetEventsByEventAccessPathRequest>(() => new GetEventsByEventAccessPathRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetEventsByEventAccessPathRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.GetWithProofReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEventsByEventAccessPathRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEventsByEventAccessPathRequest(GetEventsByEventAccessPathRequest other) : this() {
      accessPath_ = other.accessPath_ != null ? other.accessPath_.Clone() : null;
      startEventSeqNum_ = other.startEventSeqNum_;
      ascending_ = other.ascending_;
      limit_ = other.limit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEventsByEventAccessPathRequest Clone() {
      return new GetEventsByEventAccessPathRequest(this);
    }

    /// <summary>Field number for the "access_path" field.</summary>
    public const int AccessPathFieldNumber = 1;
    private global::Types.AccessPath accessPath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.AccessPath AccessPath {
      get { return accessPath_; }
      set {
        accessPath_ = value;
      }
    }

    /// <summary>Field number for the "start_event_seq_num" field.</summary>
    public const int StartEventSeqNumFieldNumber = 2;
    private ulong startEventSeqNum_;
    /// <summary>
    /// The sequence number of the event to start with for this query. Use a
    /// sequence number of MAX_INT to represent the latest.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartEventSeqNum {
      get { return startEventSeqNum_; }
      set {
        startEventSeqNum_ = value;
      }
    }

    /// <summary>Field number for the "ascending" field.</summary>
    public const int AscendingFieldNumber = 3;
    private bool ascending_;
    /// <summary>
    /// If ascending is true this query will return up to `limit` events that were
    /// emitted after `start_event_seq_num`. Otherwise it will return up to `limit`
    /// events before the offset. Both cases are inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ascending {
      get { return ascending_; }
      set {
        ascending_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 4;
    private ulong limit_;
    /// <summary>
    /// Limit number of results
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetEventsByEventAccessPathRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetEventsByEventAccessPathRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AccessPath, other.AccessPath)) return false;
      if (StartEventSeqNum != other.StartEventSeqNum) return false;
      if (Ascending != other.Ascending) return false;
      if (Limit != other.Limit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (accessPath_ != null) hash ^= AccessPath.GetHashCode();
      if (StartEventSeqNum != 0UL) hash ^= StartEventSeqNum.GetHashCode();
      if (Ascending != false) hash ^= Ascending.GetHashCode();
      if (Limit != 0UL) hash ^= Limit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (accessPath_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AccessPath);
      }
      if (StartEventSeqNum != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(StartEventSeqNum);
      }
      if (Ascending != false) {
        output.WriteRawTag(24);
        output.WriteBool(Ascending);
      }
      if (Limit != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Limit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (accessPath_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccessPath);
      }
      if (StartEventSeqNum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartEventSeqNum);
      }
      if (Ascending != false) {
        size += 1 + 1;
      }
      if (Limit != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Limit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetEventsByEventAccessPathRequest other) {
      if (other == null) {
        return;
      }
      if (other.accessPath_ != null) {
        if (accessPath_ == null) {
          AccessPath = new global::Types.AccessPath();
        }
        AccessPath.MergeFrom(other.AccessPath);
      }
      if (other.StartEventSeqNum != 0UL) {
        StartEventSeqNum = other.StartEventSeqNum;
      }
      if (other.Ascending != false) {
        Ascending = other.Ascending;
      }
      if (other.Limit != 0UL) {
        Limit = other.Limit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (accessPath_ == null) {
              AccessPath = new global::Types.AccessPath();
            }
            input.ReadMessage(AccessPath);
            break;
          }
          case 16: {
            StartEventSeqNum = input.ReadUInt64();
            break;
          }
          case 24: {
            Ascending = input.ReadBool();
            break;
          }
          case 32: {
            Limit = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetEventsByEventAccessPathResponse : pb::IMessage<GetEventsByEventAccessPathResponse> {
    private static readonly pb::MessageParser<GetEventsByEventAccessPathResponse> _parser = new pb::MessageParser<GetEventsByEventAccessPathResponse>(() => new GetEventsByEventAccessPathResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetEventsByEventAccessPathResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.GetWithProofReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEventsByEventAccessPathResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEventsByEventAccessPathResponse(GetEventsByEventAccessPathResponse other) : this() {
      eventsWithProof_ = other.eventsWithProof_.Clone();
      proofOfLatestEvent_ = other.proofOfLatestEvent_ != null ? other.proofOfLatestEvent_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEventsByEventAccessPathResponse Clone() {
      return new GetEventsByEventAccessPathResponse(this);
    }

    /// <summary>Field number for the "events_with_proof" field.</summary>
    public const int EventsWithProofFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Types.EventWithProof> _repeated_eventsWithProof_codec
        = pb::FieldCodec.ForMessage(10, global::Types.EventWithProof.Parser);
    private readonly pbc::RepeatedField<global::Types.EventWithProof> eventsWithProof_ = new pbc::RepeatedField<global::Types.EventWithProof>();
    /// <summary>
    /// Returns an event and proof of each of the events in the request. The first
    /// element of proofs will be the closest to `start_event_seq_num`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Types.EventWithProof> EventsWithProof {
      get { return eventsWithProof_; }
    }

    /// <summary>Field number for the "proof_of_latest_event" field.</summary>
    public const int ProofOfLatestEventFieldNumber = 2;
    private global::Types.AccountStateWithProof proofOfLatestEvent_;
    /// <summary>
    /// If the number of events returned is less than `limit` for an ascending
    /// query or if start_event_seq_num > the latest seq_num for a descending
    /// query,  returns the state of the account containing the given access path
    /// in the latest state. This allows the client to verify that there are in
    /// fact no extra events.
    ///
    /// The LedgerInfoWithSignatures which is on the main
    /// UpdateToLatestLedgerResponse can be used to validate this.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.AccountStateWithProof ProofOfLatestEvent {
      get { return proofOfLatestEvent_; }
      set {
        proofOfLatestEvent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetEventsByEventAccessPathResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetEventsByEventAccessPathResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!eventsWithProof_.Equals(other.eventsWithProof_)) return false;
      if (!object.Equals(ProofOfLatestEvent, other.ProofOfLatestEvent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= eventsWithProof_.GetHashCode();
      if (proofOfLatestEvent_ != null) hash ^= ProofOfLatestEvent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      eventsWithProof_.WriteTo(output, _repeated_eventsWithProof_codec);
      if (proofOfLatestEvent_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ProofOfLatestEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventsWithProof_.CalculateSize(_repeated_eventsWithProof_codec);
      if (proofOfLatestEvent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProofOfLatestEvent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetEventsByEventAccessPathResponse other) {
      if (other == null) {
        return;
      }
      eventsWithProof_.Add(other.eventsWithProof_);
      if (other.proofOfLatestEvent_ != null) {
        if (proofOfLatestEvent_ == null) {
          ProofOfLatestEvent = new global::Types.AccountStateWithProof();
        }
        ProofOfLatestEvent.MergeFrom(other.ProofOfLatestEvent);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventsWithProof_.AddEntriesFrom(input, _repeated_eventsWithProof_codec);
            break;
          }
          case 18: {
            if (proofOfLatestEvent_ == null) {
              ProofOfLatestEvent = new global::Types.AccountStateWithProof();
            }
            input.ReadMessage(ProofOfLatestEvent);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Get up to limit transactions starting from start_version.
  /// </summary>
  public sealed partial class GetTransactionsRequest : pb::IMessage<GetTransactionsRequest> {
    private static readonly pb::MessageParser<GetTransactionsRequest> _parser = new pb::MessageParser<GetTransactionsRequest>(() => new GetTransactionsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTransactionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.GetWithProofReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsRequest(GetTransactionsRequest other) : this() {
      startVersion_ = other.startVersion_;
      limit_ = other.limit_;
      fetchEvents_ = other.fetchEvents_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsRequest Clone() {
      return new GetTransactionsRequest(this);
    }

    /// <summary>Field number for the "start_version" field.</summary>
    public const int StartVersionFieldNumber = 1;
    private ulong startVersion_;
    /// <summary>
    /// The version of the transaction to start with for this query.  Use a version
    /// of MAX_INT to represent the latest.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartVersion {
      get { return startVersion_; }
      set {
        startVersion_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 2;
    private ulong limit_;
    /// <summary>
    /// Limit number of results
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "fetch_events" field.</summary>
    public const int FetchEventsFieldNumber = 3;
    private bool fetchEvents_;
    /// <summary>
    /// Set to true to fetch events for the transaction at each version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FetchEvents {
      get { return fetchEvents_; }
      set {
        fetchEvents_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTransactionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTransactionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartVersion != other.StartVersion) return false;
      if (Limit != other.Limit) return false;
      if (FetchEvents != other.FetchEvents) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartVersion != 0UL) hash ^= StartVersion.GetHashCode();
      if (Limit != 0UL) hash ^= Limit.GetHashCode();
      if (FetchEvents != false) hash ^= FetchEvents.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartVersion != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(StartVersion);
      }
      if (Limit != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Limit);
      }
      if (FetchEvents != false) {
        output.WriteRawTag(24);
        output.WriteBool(FetchEvents);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartVersion != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartVersion);
      }
      if (Limit != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Limit);
      }
      if (FetchEvents != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTransactionsRequest other) {
      if (other == null) {
        return;
      }
      if (other.StartVersion != 0UL) {
        StartVersion = other.StartVersion;
      }
      if (other.Limit != 0UL) {
        Limit = other.Limit;
      }
      if (other.FetchEvents != false) {
        FetchEvents = other.FetchEvents;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartVersion = input.ReadUInt64();
            break;
          }
          case 16: {
            Limit = input.ReadUInt64();
            break;
          }
          case 24: {
            FetchEvents = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTransactionsResponse : pb::IMessage<GetTransactionsResponse> {
    private static readonly pb::MessageParser<GetTransactionsResponse> _parser = new pb::MessageParser<GetTransactionsResponse>(() => new GetTransactionsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTransactionsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.GetWithProofReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsResponse(GetTransactionsResponse other) : this() {
      txnListWithProof_ = other.txnListWithProof_ != null ? other.txnListWithProof_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsResponse Clone() {
      return new GetTransactionsResponse(this);
    }

    /// <summary>Field number for the "txn_list_with_proof" field.</summary>
    public const int TxnListWithProofFieldNumber = 1;
    private global::Types.TransactionListWithProof txnListWithProof_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.TransactionListWithProof TxnListWithProof {
      get { return txnListWithProof_; }
      set {
        txnListWithProof_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTransactionsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTransactionsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TxnListWithProof, other.TxnListWithProof)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (txnListWithProof_ != null) hash ^= TxnListWithProof.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (txnListWithProof_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TxnListWithProof);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (txnListWithProof_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TxnListWithProof);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTransactionsResponse other) {
      if (other == null) {
        return;
      }
      if (other.txnListWithProof_ != null) {
        if (txnListWithProof_ == null) {
          TxnListWithProof = new global::Types.TransactionListWithProof();
        }
        TxnListWithProof.MergeFrom(other.TxnListWithProof);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (txnListWithProof_ == null) {
              TxnListWithProof = new global::Types.TransactionListWithProof();
            }
            input.ReadMessage(TxnListWithProof);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
